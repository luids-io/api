// Copyright 2020 Luis Guill√©n Civera <luisguillenc@gmail.com>. View LICENSE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.6.1
// source: github.com/luids-io/api/schemas/netutil/analyze.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Layer int32

const (
	Layer_ETHERNET Layer = 0
	Layer_IPV4     Layer = 1
	Layer_IPV6     Layer = 2
)

// Enum value maps for Layer.
var (
	Layer_name = map[int32]string{
		0: "ETHERNET",
		1: "IPV4",
		2: "IPV6",
	}
	Layer_value = map[string]int32{
		"ETHERNET": 0,
		"IPV4":     1,
		"IPV6":     2,
	}
)

func (x Layer) Enum() *Layer {
	p := new(Layer)
	*p = x
	return p
}

func (x Layer) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Layer) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_luids_io_api_schemas_netutil_analyze_proto_enumTypes[0].Descriptor()
}

func (Layer) Type() protoreflect.EnumType {
	return &file_github_com_luids_io_api_schemas_netutil_analyze_proto_enumTypes[0]
}

func (x Layer) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Layer.Descriptor instead.
func (Layer) EnumDescriptor() ([]byte, []int) {
	return file_github_com_luids_io_api_schemas_netutil_analyze_proto_rawDescGZIP(), []int{0}
}

type SendPacketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Layer    Layer           `protobuf:"varint,1,opt,name=layer,proto3,enum=luids.netutil.v1.Layer" json:"layer,omitempty"`
	Metadata *PacketMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Data     []byte          `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SendPacketRequest) Reset() {
	*x = SendPacketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_luids_io_api_schemas_netutil_analyze_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendPacketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendPacketRequest) ProtoMessage() {}

func (x *SendPacketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_luids_io_api_schemas_netutil_analyze_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendPacketRequest.ProtoReflect.Descriptor instead.
func (*SendPacketRequest) Descriptor() ([]byte, []int) {
	return file_github_com_luids_io_api_schemas_netutil_analyze_proto_rawDescGZIP(), []int{0}
}

func (x *SendPacketRequest) GetLayer() Layer {
	if x != nil {
		return x.Layer
	}
	return Layer_ETHERNET
}

func (x *SendPacketRequest) GetMetadata() *PacketMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *SendPacketRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type PacketMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp      *timestamp.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	CaptureLength  int32                `protobuf:"varint,2,opt,name=capture_length,json=captureLength,proto3" json:"capture_length,omitempty"`
	Length         int32                `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	InterfaceIndex int32                `protobuf:"varint,4,opt,name=interface_index,json=interfaceIndex,proto3" json:"interface_index,omitempty"`
}

func (x *PacketMetadata) Reset() {
	*x = PacketMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_luids_io_api_schemas_netutil_analyze_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketMetadata) ProtoMessage() {}

func (x *PacketMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_luids_io_api_schemas_netutil_analyze_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketMetadata.ProtoReflect.Descriptor instead.
func (*PacketMetadata) Descriptor() ([]byte, []int) {
	return file_github_com_luids_io_api_schemas_netutil_analyze_proto_rawDescGZIP(), []int{1}
}

func (x *PacketMetadata) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *PacketMetadata) GetCaptureLength() int32 {
	if x != nil {
		return x.CaptureLength
	}
	return 0
}

func (x *PacketMetadata) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *PacketMetadata) GetInterfaceIndex() int32 {
	if x != nil {
		return x.InterfaceIndex
	}
	return 0
}

var File_github_com_luids_io_api_schemas_netutil_analyze_proto protoreflect.FileDescriptor

var file_github_com_luids_io_api_schemas_netutil_analyze_proto_rawDesc = []byte{
	0x0a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x75, 0x69,
	0x64, 0x73, 0x2d, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x73, 0x2f, 0x6e, 0x65, 0x74, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x6c, 0x75, 0x69, 0x64, 0x73, 0x2e, 0x6e,
	0x65, 0x74, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x94, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a,
	0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6c,
	0x75, 0x69, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6c, 0x75, 0x69, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb2,
	0x01, 0x0a, 0x0e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x2a, 0x29, 0x0a, 0x05, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x0c, 0x0a, 0x08,
	0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50,
	0x56, 0x34, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x56, 0x36, 0x10, 0x02, 0x32, 0x59,
	0x0a, 0x07, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x12, 0x4e, 0x0a, 0x0b, 0x53, 0x65, 0x6e,
	0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x6c, 0x75, 0x69, 0x64, 0x73,
	0x2e, 0x6e, 0x65, 0x74, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x28, 0x01, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x75, 0x69, 0x64, 0x73, 0x2d, 0x69, 0x6f,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x67, 0x72, 0x70,
	0x63, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_luids_io_api_schemas_netutil_analyze_proto_rawDescOnce sync.Once
	file_github_com_luids_io_api_schemas_netutil_analyze_proto_rawDescData = file_github_com_luids_io_api_schemas_netutil_analyze_proto_rawDesc
)

func file_github_com_luids_io_api_schemas_netutil_analyze_proto_rawDescGZIP() []byte {
	file_github_com_luids_io_api_schemas_netutil_analyze_proto_rawDescOnce.Do(func() {
		file_github_com_luids_io_api_schemas_netutil_analyze_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_luids_io_api_schemas_netutil_analyze_proto_rawDescData)
	})
	return file_github_com_luids_io_api_schemas_netutil_analyze_proto_rawDescData
}

var file_github_com_luids_io_api_schemas_netutil_analyze_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_github_com_luids_io_api_schemas_netutil_analyze_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_github_com_luids_io_api_schemas_netutil_analyze_proto_goTypes = []interface{}{
	(Layer)(0),                  // 0: luids.netutil.v1.Layer
	(*SendPacketRequest)(nil),   // 1: luids.netutil.v1.SendPacketRequest
	(*PacketMetadata)(nil),      // 2: luids.netutil.v1.PacketMetadata
	(*timestamp.Timestamp)(nil), // 3: google.protobuf.Timestamp
	(*empty.Empty)(nil),         // 4: google.protobuf.Empty
}
var file_github_com_luids_io_api_schemas_netutil_analyze_proto_depIdxs = []int32{
	0, // 0: luids.netutil.v1.SendPacketRequest.layer:type_name -> luids.netutil.v1.Layer
	2, // 1: luids.netutil.v1.SendPacketRequest.metadata:type_name -> luids.netutil.v1.PacketMetadata
	3, // 2: luids.netutil.v1.PacketMetadata.timestamp:type_name -> google.protobuf.Timestamp
	1, // 3: luids.netutil.v1.Analyze.SendPackets:input_type -> luids.netutil.v1.SendPacketRequest
	4, // 4: luids.netutil.v1.Analyze.SendPackets:output_type -> google.protobuf.Empty
	4, // [4:5] is the sub-list for method output_type
	3, // [3:4] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_github_com_luids_io_api_schemas_netutil_analyze_proto_init() }
func file_github_com_luids_io_api_schemas_netutil_analyze_proto_init() {
	if File_github_com_luids_io_api_schemas_netutil_analyze_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_luids_io_api_schemas_netutil_analyze_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendPacketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_luids_io_api_schemas_netutil_analyze_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_luids_io_api_schemas_netutil_analyze_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_luids_io_api_schemas_netutil_analyze_proto_goTypes,
		DependencyIndexes: file_github_com_luids_io_api_schemas_netutil_analyze_proto_depIdxs,
		EnumInfos:         file_github_com_luids_io_api_schemas_netutil_analyze_proto_enumTypes,
		MessageInfos:      file_github_com_luids_io_api_schemas_netutil_analyze_proto_msgTypes,
	}.Build()
	File_github_com_luids_io_api_schemas_netutil_analyze_proto = out.File
	file_github_com_luids_io_api_schemas_netutil_analyze_proto_rawDesc = nil
	file_github_com_luids_io_api_schemas_netutil_analyze_proto_goTypes = nil
	file_github_com_luids_io_api_schemas_netutil_analyze_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AnalyzeClient is the client API for Analyze service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AnalyzeClient interface {
	SendPackets(ctx context.Context, opts ...grpc.CallOption) (Analyze_SendPacketsClient, error)
}

type analyzeClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalyzeClient(cc grpc.ClientConnInterface) AnalyzeClient {
	return &analyzeClient{cc}
}

func (c *analyzeClient) SendPackets(ctx context.Context, opts ...grpc.CallOption) (Analyze_SendPacketsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Analyze_serviceDesc.Streams[0], "/luids.netutil.v1.Analyze/SendPackets", opts...)
	if err != nil {
		return nil, err
	}
	x := &analyzeSendPacketsClient{stream}
	return x, nil
}

type Analyze_SendPacketsClient interface {
	Send(*SendPacketRequest) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type analyzeSendPacketsClient struct {
	grpc.ClientStream
}

func (x *analyzeSendPacketsClient) Send(m *SendPacketRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *analyzeSendPacketsClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AnalyzeServer is the server API for Analyze service.
type AnalyzeServer interface {
	SendPackets(Analyze_SendPacketsServer) error
}

// UnimplementedAnalyzeServer can be embedded to have forward compatible implementations.
type UnimplementedAnalyzeServer struct {
}

func (*UnimplementedAnalyzeServer) SendPackets(Analyze_SendPacketsServer) error {
	return status.Errorf(codes.Unimplemented, "method SendPackets not implemented")
}

func RegisterAnalyzeServer(s *grpc.Server, srv AnalyzeServer) {
	s.RegisterService(&_Analyze_serviceDesc, srv)
}

func _Analyze_SendPackets_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AnalyzeServer).SendPackets(&analyzeSendPacketsServer{stream})
}

type Analyze_SendPacketsServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*SendPacketRequest, error)
	grpc.ServerStream
}

type analyzeSendPacketsServer struct {
	grpc.ServerStream
}

func (x *analyzeSendPacketsServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *analyzeSendPacketsServer) Recv() (*SendPacketRequest, error) {
	m := new(SendPacketRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Analyze_serviceDesc = grpc.ServiceDesc{
	ServiceName: "luids.netutil.v1.Analyze",
	HandlerType: (*AnalyzeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendPackets",
			Handler:       _Analyze_SendPackets_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/luids-io/api/schemas/netutil/analyze.proto",
}
