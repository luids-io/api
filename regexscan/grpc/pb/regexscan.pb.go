// Code generated by protoc-gen-go. DO NOT EDIT.
// source: regexscan.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ScanBlockRequest struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScanBlockRequest) Reset()         { *m = ScanBlockRequest{} }
func (m *ScanBlockRequest) String() string { return proto.CompactTextString(m) }
func (*ScanBlockRequest) ProtoMessage()    {}
func (*ScanBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef3eb1adacad225b, []int{0}
}

func (m *ScanBlockRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScanBlockRequest.Unmarshal(m, b)
}
func (m *ScanBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScanBlockRequest.Marshal(b, m, deterministic)
}
func (m *ScanBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScanBlockRequest.Merge(m, src)
}
func (m *ScanBlockRequest) XXX_Size() int {
	return xxx_messageInfo_ScanBlockRequest.Size(m)
}
func (m *ScanBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ScanBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ScanBlockRequest proto.InternalMessageInfo

func (m *ScanBlockRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type ScanBlockResponse struct {
	Result               bool     `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Reasons              []string `protobuf:"bytes,2,rep,name=reasons,proto3" json:"reasons,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScanBlockResponse) Reset()         { *m = ScanBlockResponse{} }
func (m *ScanBlockResponse) String() string { return proto.CompactTextString(m) }
func (*ScanBlockResponse) ProtoMessage()    {}
func (*ScanBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef3eb1adacad225b, []int{1}
}

func (m *ScanBlockResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScanBlockResponse.Unmarshal(m, b)
}
func (m *ScanBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScanBlockResponse.Marshal(b, m, deterministic)
}
func (m *ScanBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScanBlockResponse.Merge(m, src)
}
func (m *ScanBlockResponse) XXX_Size() int {
	return xxx_messageInfo_ScanBlockResponse.Size(m)
}
func (m *ScanBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ScanBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ScanBlockResponse proto.InternalMessageInfo

func (m *ScanBlockResponse) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *ScanBlockResponse) GetReasons() []string {
	if m != nil {
		return m.Reasons
	}
	return nil
}

type ScanStreamRequest struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Finish               bool     `protobuf:"varint,2,opt,name=finish,proto3" json:"finish,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScanStreamRequest) Reset()         { *m = ScanStreamRequest{} }
func (m *ScanStreamRequest) String() string { return proto.CompactTextString(m) }
func (*ScanStreamRequest) ProtoMessage()    {}
func (*ScanStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef3eb1adacad225b, []int{2}
}

func (m *ScanStreamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScanStreamRequest.Unmarshal(m, b)
}
func (m *ScanStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScanStreamRequest.Marshal(b, m, deterministic)
}
func (m *ScanStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScanStreamRequest.Merge(m, src)
}
func (m *ScanStreamRequest) XXX_Size() int {
	return xxx_messageInfo_ScanStreamRequest.Size(m)
}
func (m *ScanStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ScanStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ScanStreamRequest proto.InternalMessageInfo

func (m *ScanStreamRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ScanStreamRequest) GetFinish() bool {
	if m != nil {
		return m.Finish
	}
	return false
}

type ScanStreamResponse struct {
	Reason               string   `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScanStreamResponse) Reset()         { *m = ScanStreamResponse{} }
func (m *ScanStreamResponse) String() string { return proto.CompactTextString(m) }
func (*ScanStreamResponse) ProtoMessage()    {}
func (*ScanStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef3eb1adacad225b, []int{3}
}

func (m *ScanStreamResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScanStreamResponse.Unmarshal(m, b)
}
func (m *ScanStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScanStreamResponse.Marshal(b, m, deterministic)
}
func (m *ScanStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScanStreamResponse.Merge(m, src)
}
func (m *ScanStreamResponse) XXX_Size() int {
	return xxx_messageInfo_ScanStreamResponse.Size(m)
}
func (m *ScanStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ScanStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ScanStreamResponse proto.InternalMessageInfo

func (m *ScanStreamResponse) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func init() {
	proto.RegisterType((*ScanBlockRequest)(nil), "luids.regexscan.v1.ScanBlockRequest")
	proto.RegisterType((*ScanBlockResponse)(nil), "luids.regexscan.v1.ScanBlockResponse")
	proto.RegisterType((*ScanStreamRequest)(nil), "luids.regexscan.v1.ScanStreamRequest")
	proto.RegisterType((*ScanStreamResponse)(nil), "luids.regexscan.v1.ScanStreamResponse")
}

func init() { proto.RegisterFile("regexscan.proto", fileDescriptor_ef3eb1adacad225b) }

var fileDescriptor_ef3eb1adacad225b = []byte{
	// 271 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x5f, 0x4b, 0xc3, 0x30,
	0x14, 0xc5, 0xed, 0xd4, 0x6a, 0x2f, 0x82, 0x7a, 0x1f, 0xa4, 0xec, 0x69, 0x14, 0x1d, 0x15, 0xb5,
	0xd5, 0xf9, 0x01, 0x84, 0x81, 0x5f, 0x20, 0x7b, 0xdb, 0x5b, 0x9a, 0xc5, 0x2e, 0xac, 0x4b, 0x62,
	0x92, 0x8a, 0x1f, 0x5f, 0x96, 0xec, 0x4f, 0x55, 0x74, 0x6f, 0x39, 0xe1, 0xe4, 0x77, 0x4e, 0xee,
	0x85, 0x73, 0xc3, 0x6b, 0xfe, 0x69, 0x19, 0x95, 0x85, 0x36, 0xca, 0x29, 0xc4, 0xa6, 0x15, 0x33,
	0x5b, 0xec, 0xae, 0x3f, 0x9e, 0xb2, 0x21, 0x5c, 0x4c, 0x18, 0x95, 0xe3, 0x46, 0xb1, 0x05, 0xe1,
	0xef, 0x2d, 0xb7, 0x0e, 0x11, 0x8e, 0x66, 0xd4, 0xd1, 0x34, 0x1a, 0x44, 0xf9, 0x19, 0xf1, 0xe7,
	0xec, 0x15, 0x2e, 0x3b, 0x3e, 0xab, 0x95, 0xb4, 0x1c, 0xaf, 0x20, 0x36, 0xdc, 0xb6, 0x8d, 0xf3,
	0xd6, 0x53, 0xb2, 0x56, 0x98, 0xc2, 0x89, 0xe1, 0xd4, 0x2a, 0x69, 0xd3, 0xde, 0xe0, 0x30, 0x4f,
	0xc8, 0x46, 0x66, 0x2f, 0x01, 0x33, 0x71, 0x86, 0xd3, 0xe5, 0x3f, 0x79, 0x2b, 0xf4, 0x9b, 0x90,
	0xc2, 0xce, 0xd3, 0x5e, 0x40, 0x07, 0x95, 0xdd, 0x03, 0x76, 0x01, 0xdd, 0x22, 0xab, 0x04, 0xcf,
	0x48, 0xc8, 0x5a, 0x8d, 0x18, 0x1c, 0xfb, 0xc6, 0x38, 0x85, 0x64, 0x5b, 0x1f, 0xaf, 0x8b, 0xdf,
	0x83, 0x28, 0x7e, 0x4e, 0xa1, 0x7f, 0xb3, 0xc7, 0x15, 0xa2, 0xb3, 0x83, 0xd1, 0x02, 0xe2, 0x50,
	0x07, 0x29, 0xc0, 0xae, 0x1c, 0xfe, 0x09, 0xf8, 0xf6, 0xfb, 0xfe, 0x70, 0x9f, 0x6d, 0x13, 0x94,
	0x47, 0x8f, 0xd1, 0xf8, 0x6e, 0x7a, 0x5b, 0x0b, 0x37, 0x6f, 0xab, 0x82, 0xa9, 0x65, 0xe9, 0x5f,
	0x3e, 0x08, 0x55, 0x52, 0x2d, 0xca, 0x2d, 0xa0, 0xac, 0x8d, 0x66, 0xa5, 0xae, 0xaa, 0xd8, 0xef,
	0xfd, 0xf9, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x6d, 0xe3, 0x10, 0x86, 0x0a, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BlockClient is the client API for Block service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BlockClient interface {
	ScanBlock(ctx context.Context, in *ScanBlockRequest, opts ...grpc.CallOption) (*ScanBlockResponse, error)
}

type blockClient struct {
	cc *grpc.ClientConn
}

func NewBlockClient(cc *grpc.ClientConn) BlockClient {
	return &blockClient{cc}
}

func (c *blockClient) ScanBlock(ctx context.Context, in *ScanBlockRequest, opts ...grpc.CallOption) (*ScanBlockResponse, error) {
	out := new(ScanBlockResponse)
	err := c.cc.Invoke(ctx, "/luids.regexscan.v1.Block/ScanBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockServer is the server API for Block service.
type BlockServer interface {
	ScanBlock(context.Context, *ScanBlockRequest) (*ScanBlockResponse, error)
}

// UnimplementedBlockServer can be embedded to have forward compatible implementations.
type UnimplementedBlockServer struct {
}

func (*UnimplementedBlockServer) ScanBlock(ctx context.Context, req *ScanBlockRequest) (*ScanBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanBlock not implemented")
}

func RegisterBlockServer(s *grpc.Server, srv BlockServer) {
	s.RegisterService(&_Block_serviceDesc, srv)
}

func _Block_ScanBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServer).ScanBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luids.regexscan.v1.Block/ScanBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServer).ScanBlock(ctx, req.(*ScanBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Block_serviceDesc = grpc.ServiceDesc{
	ServiceName: "luids.regexscan.v1.Block",
	HandlerType: (*BlockServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScanBlock",
			Handler:    _Block_ScanBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "regexscan.proto",
}

// StreamClient is the client API for Stream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamClient interface {
	ScanStream(ctx context.Context, opts ...grpc.CallOption) (Stream_ScanStreamClient, error)
}

type streamClient struct {
	cc *grpc.ClientConn
}

func NewStreamClient(cc *grpc.ClientConn) StreamClient {
	return &streamClient{cc}
}

func (c *streamClient) ScanStream(ctx context.Context, opts ...grpc.CallOption) (Stream_ScanStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Stream_serviceDesc.Streams[0], "/luids.regexscan.v1.Stream/ScanStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamScanStreamClient{stream}
	return x, nil
}

type Stream_ScanStreamClient interface {
	Send(*ScanStreamRequest) error
	Recv() (*ScanStreamResponse, error)
	grpc.ClientStream
}

type streamScanStreamClient struct {
	grpc.ClientStream
}

func (x *streamScanStreamClient) Send(m *ScanStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamScanStreamClient) Recv() (*ScanStreamResponse, error) {
	m := new(ScanStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamServer is the server API for Stream service.
type StreamServer interface {
	ScanStream(Stream_ScanStreamServer) error
}

// UnimplementedStreamServer can be embedded to have forward compatible implementations.
type UnimplementedStreamServer struct {
}

func (*UnimplementedStreamServer) ScanStream(srv Stream_ScanStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ScanStream not implemented")
}

func RegisterStreamServer(s *grpc.Server, srv StreamServer) {
	s.RegisterService(&_Stream_serviceDesc, srv)
}

func _Stream_ScanStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServer).ScanStream(&streamScanStreamServer{stream})
}

type Stream_ScanStreamServer interface {
	Send(*ScanStreamResponse) error
	Recv() (*ScanStreamRequest, error)
	grpc.ServerStream
}

type streamScanStreamServer struct {
	grpc.ServerStream
}

func (x *streamScanStreamServer) Send(m *ScanStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamScanStreamServer) Recv() (*ScanStreamRequest, error) {
	m := new(ScanStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Stream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "luids.regexscan.v1.Stream",
	HandlerType: (*StreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ScanStream",
			Handler:       _Stream_ScanStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "regexscan.proto",
}
