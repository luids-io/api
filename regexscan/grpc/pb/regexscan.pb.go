// Copyright 2019 Luis Guill√©n Civera <luisguillenc@gmail.com>. View LICENSE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.6.1
// source: github.com/luids-io/api/schemas/regexscan/regexscan.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ScanBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ScanBlockRequest) Reset() {
	*x = ScanBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_luids_io_api_schemas_regexscan_regexscan_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanBlockRequest) ProtoMessage() {}

func (x *ScanBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_luids_io_api_schemas_regexscan_regexscan_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanBlockRequest.ProtoReflect.Descriptor instead.
func (*ScanBlockRequest) Descriptor() ([]byte, []int) {
	return file_github_com_luids_io_api_schemas_regexscan_regexscan_proto_rawDescGZIP(), []int{0}
}

func (x *ScanBlockRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ScanBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  bool     `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Reasons []string `protobuf:"bytes,2,rep,name=reasons,proto3" json:"reasons,omitempty"`
}

func (x *ScanBlockResponse) Reset() {
	*x = ScanBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_luids_io_api_schemas_regexscan_regexscan_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanBlockResponse) ProtoMessage() {}

func (x *ScanBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_luids_io_api_schemas_regexscan_regexscan_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanBlockResponse.ProtoReflect.Descriptor instead.
func (*ScanBlockResponse) Descriptor() ([]byte, []int) {
	return file_github_com_luids_io_api_schemas_regexscan_regexscan_proto_rawDescGZIP(), []int{1}
}

func (x *ScanBlockResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ScanBlockResponse) GetReasons() []string {
	if x != nil {
		return x.Reasons
	}
	return nil
}

type ScanStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data   []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Finish bool   `protobuf:"varint,2,opt,name=finish,proto3" json:"finish,omitempty"`
}

func (x *ScanStreamRequest) Reset() {
	*x = ScanStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_luids_io_api_schemas_regexscan_regexscan_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanStreamRequest) ProtoMessage() {}

func (x *ScanStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_luids_io_api_schemas_regexscan_regexscan_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanStreamRequest.ProtoReflect.Descriptor instead.
func (*ScanStreamRequest) Descriptor() ([]byte, []int) {
	return file_github_com_luids_io_api_schemas_regexscan_regexscan_proto_rawDescGZIP(), []int{2}
}

func (x *ScanStreamRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ScanStreamRequest) GetFinish() bool {
	if x != nil {
		return x.Finish
	}
	return false
}

type ScanStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *ScanStreamResponse) Reset() {
	*x = ScanStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_luids_io_api_schemas_regexscan_regexscan_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanStreamResponse) ProtoMessage() {}

func (x *ScanStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_luids_io_api_schemas_regexscan_regexscan_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanStreamResponse.ProtoReflect.Descriptor instead.
func (*ScanStreamResponse) Descriptor() ([]byte, []int) {
	return file_github_com_luids_io_api_schemas_regexscan_regexscan_proto_rawDescGZIP(), []int{3}
}

func (x *ScanStreamResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

var File_github_com_luids_io_api_schemas_regexscan_regexscan_proto protoreflect.FileDescriptor

var file_github_com_luids_io_api_schemas_regexscan_regexscan_proto_rawDesc = []byte{
	0x0a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x75, 0x69,
	0x64, 0x73, 0x2d, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x73, 0x2f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x73, 0x63, 0x61, 0x6e, 0x2f, 0x72, 0x65, 0x67, 0x65,
	0x78, 0x73, 0x63, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x6c, 0x75, 0x69,
	0x64, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x65, 0x78, 0x73, 0x63, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x22,
	0x26, 0x0a, 0x10, 0x53, 0x63, 0x61, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x45, 0x0a, 0x11, 0x53, 0x63, 0x61, 0x6e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x22, 0x3f,
	0x0a, 0x11, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x22,
	0x2c, 0x0a, 0x12, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x32, 0x63, 0x0a,
	0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x5a, 0x0a, 0x09, 0x53, 0x63, 0x61, 0x6e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x24, 0x2e, 0x6c, 0x75, 0x69, 0x64, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x65,
	0x78, 0x73, 0x63, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6c, 0x75, 0x69, 0x64,
	0x73, 0x2e, 0x72, 0x65, 0x67, 0x65, 0x78, 0x73, 0x63, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x63, 0x61, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x32, 0x6b, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x61, 0x0a, 0x0a,
	0x53, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x25, 0x2e, 0x6c, 0x75, 0x69,
	0x64, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x65, 0x78, 0x73, 0x63, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x6c, 0x75, 0x69, 0x64, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x65, 0x78, 0x73,
	0x63, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42,
	0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x75,
	0x69, 0x64, 0x73, 0x2d, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x67, 0x65, 0x78,
	0x73, 0x63, 0x61, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_luids_io_api_schemas_regexscan_regexscan_proto_rawDescOnce sync.Once
	file_github_com_luids_io_api_schemas_regexscan_regexscan_proto_rawDescData = file_github_com_luids_io_api_schemas_regexscan_regexscan_proto_rawDesc
)

func file_github_com_luids_io_api_schemas_regexscan_regexscan_proto_rawDescGZIP() []byte {
	file_github_com_luids_io_api_schemas_regexscan_regexscan_proto_rawDescOnce.Do(func() {
		file_github_com_luids_io_api_schemas_regexscan_regexscan_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_luids_io_api_schemas_regexscan_regexscan_proto_rawDescData)
	})
	return file_github_com_luids_io_api_schemas_regexscan_regexscan_proto_rawDescData
}

var file_github_com_luids_io_api_schemas_regexscan_regexscan_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_github_com_luids_io_api_schemas_regexscan_regexscan_proto_goTypes = []interface{}{
	(*ScanBlockRequest)(nil),   // 0: luids.regexscan.v1.ScanBlockRequest
	(*ScanBlockResponse)(nil),  // 1: luids.regexscan.v1.ScanBlockResponse
	(*ScanStreamRequest)(nil),  // 2: luids.regexscan.v1.ScanStreamRequest
	(*ScanStreamResponse)(nil), // 3: luids.regexscan.v1.ScanStreamResponse
}
var file_github_com_luids_io_api_schemas_regexscan_regexscan_proto_depIdxs = []int32{
	0, // 0: luids.regexscan.v1.Block.ScanBlock:input_type -> luids.regexscan.v1.ScanBlockRequest
	2, // 1: luids.regexscan.v1.Stream.ScanStream:input_type -> luids.regexscan.v1.ScanStreamRequest
	1, // 2: luids.regexscan.v1.Block.ScanBlock:output_type -> luids.regexscan.v1.ScanBlockResponse
	3, // 3: luids.regexscan.v1.Stream.ScanStream:output_type -> luids.regexscan.v1.ScanStreamResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_github_com_luids_io_api_schemas_regexscan_regexscan_proto_init() }
func file_github_com_luids_io_api_schemas_regexscan_regexscan_proto_init() {
	if File_github_com_luids_io_api_schemas_regexscan_regexscan_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_luids_io_api_schemas_regexscan_regexscan_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_luids_io_api_schemas_regexscan_regexscan_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_luids_io_api_schemas_regexscan_regexscan_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_luids_io_api_schemas_regexscan_regexscan_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_luids_io_api_schemas_regexscan_regexscan_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_github_com_luids_io_api_schemas_regexscan_regexscan_proto_goTypes,
		DependencyIndexes: file_github_com_luids_io_api_schemas_regexscan_regexscan_proto_depIdxs,
		MessageInfos:      file_github_com_luids_io_api_schemas_regexscan_regexscan_proto_msgTypes,
	}.Build()
	File_github_com_luids_io_api_schemas_regexscan_regexscan_proto = out.File
	file_github_com_luids_io_api_schemas_regexscan_regexscan_proto_rawDesc = nil
	file_github_com_luids_io_api_schemas_regexscan_regexscan_proto_goTypes = nil
	file_github_com_luids_io_api_schemas_regexscan_regexscan_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BlockClient is the client API for Block service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BlockClient interface {
	ScanBlock(ctx context.Context, in *ScanBlockRequest, opts ...grpc.CallOption) (*ScanBlockResponse, error)
}

type blockClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockClient(cc grpc.ClientConnInterface) BlockClient {
	return &blockClient{cc}
}

func (c *blockClient) ScanBlock(ctx context.Context, in *ScanBlockRequest, opts ...grpc.CallOption) (*ScanBlockResponse, error) {
	out := new(ScanBlockResponse)
	err := c.cc.Invoke(ctx, "/luids.regexscan.v1.Block/ScanBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockServer is the server API for Block service.
type BlockServer interface {
	ScanBlock(context.Context, *ScanBlockRequest) (*ScanBlockResponse, error)
}

// UnimplementedBlockServer can be embedded to have forward compatible implementations.
type UnimplementedBlockServer struct {
}

func (*UnimplementedBlockServer) ScanBlock(context.Context, *ScanBlockRequest) (*ScanBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanBlock not implemented")
}

func RegisterBlockServer(s *grpc.Server, srv BlockServer) {
	s.RegisterService(&_Block_serviceDesc, srv)
}

func _Block_ScanBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServer).ScanBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luids.regexscan.v1.Block/ScanBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServer).ScanBlock(ctx, req.(*ScanBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Block_serviceDesc = grpc.ServiceDesc{
	ServiceName: "luids.regexscan.v1.Block",
	HandlerType: (*BlockServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScanBlock",
			Handler:    _Block_ScanBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/luids-io/api/schemas/regexscan/regexscan.proto",
}

// StreamClient is the client API for Stream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamClient interface {
	ScanStream(ctx context.Context, opts ...grpc.CallOption) (Stream_ScanStreamClient, error)
}

type streamClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamClient(cc grpc.ClientConnInterface) StreamClient {
	return &streamClient{cc}
}

func (c *streamClient) ScanStream(ctx context.Context, opts ...grpc.CallOption) (Stream_ScanStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Stream_serviceDesc.Streams[0], "/luids.regexscan.v1.Stream/ScanStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamScanStreamClient{stream}
	return x, nil
}

type Stream_ScanStreamClient interface {
	Send(*ScanStreamRequest) error
	Recv() (*ScanStreamResponse, error)
	grpc.ClientStream
}

type streamScanStreamClient struct {
	grpc.ClientStream
}

func (x *streamScanStreamClient) Send(m *ScanStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamScanStreamClient) Recv() (*ScanStreamResponse, error) {
	m := new(ScanStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamServer is the server API for Stream service.
type StreamServer interface {
	ScanStream(Stream_ScanStreamServer) error
}

// UnimplementedStreamServer can be embedded to have forward compatible implementations.
type UnimplementedStreamServer struct {
}

func (*UnimplementedStreamServer) ScanStream(Stream_ScanStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ScanStream not implemented")
}

func RegisterStreamServer(s *grpc.Server, srv StreamServer) {
	s.RegisterService(&_Stream_serviceDesc, srv)
}

func _Stream_ScanStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServer).ScanStream(&streamScanStreamServer{stream})
}

type Stream_ScanStreamServer interface {
	Send(*ScanStreamResponse) error
	Recv() (*ScanStreamRequest, error)
	grpc.ServerStream
}

type streamScanStreamServer struct {
	grpc.ServerStream
}

func (x *streamScanStreamServer) Send(m *ScanStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamScanStreamServer) Recv() (*ScanStreamRequest, error) {
	m := new(ScanStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Stream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "luids.regexscan.v1.Stream",
	HandlerType: (*StreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ScanStream",
			Handler:       _Stream_ScanStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/luids-io/api/schemas/regexscan/regexscan.proto",
}
