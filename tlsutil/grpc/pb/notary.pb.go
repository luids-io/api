// Code generated by protoc-gen-go. DO NOT EDIT.
// source: notary.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetServerChainRequest struct {
	Ip                   string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port                 int32    `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Sni                  string   `protobuf:"bytes,3,opt,name=sni,proto3" json:"sni,omitempty"`
	Profile              string   `protobuf:"bytes,4,opt,name=profile,proto3" json:"profile,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetServerChainRequest) Reset()         { *m = GetServerChainRequest{} }
func (m *GetServerChainRequest) String() string { return proto.CompactTextString(m) }
func (*GetServerChainRequest) ProtoMessage()    {}
func (*GetServerChainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3680e836ae35d891, []int{0}
}

func (m *GetServerChainRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetServerChainRequest.Unmarshal(m, b)
}
func (m *GetServerChainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetServerChainRequest.Marshal(b, m, deterministic)
}
func (m *GetServerChainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetServerChainRequest.Merge(m, src)
}
func (m *GetServerChainRequest) XXX_Size() int {
	return xxx_messageInfo_GetServerChainRequest.Size(m)
}
func (m *GetServerChainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetServerChainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetServerChainRequest proto.InternalMessageInfo

func (m *GetServerChainRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *GetServerChainRequest) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *GetServerChainRequest) GetSni() string {
	if m != nil {
		return m.Sni
	}
	return ""
}

func (m *GetServerChainRequest) GetProfile() string {
	if m != nil {
		return m.Profile
	}
	return ""
}

type GetServerChainResponse struct {
	Chain                string   `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetServerChainResponse) Reset()         { *m = GetServerChainResponse{} }
func (m *GetServerChainResponse) String() string { return proto.CompactTextString(m) }
func (*GetServerChainResponse) ProtoMessage()    {}
func (*GetServerChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3680e836ae35d891, []int{1}
}

func (m *GetServerChainResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetServerChainResponse.Unmarshal(m, b)
}
func (m *GetServerChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetServerChainResponse.Marshal(b, m, deterministic)
}
func (m *GetServerChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetServerChainResponse.Merge(m, src)
}
func (m *GetServerChainResponse) XXX_Size() int {
	return xxx_messageInfo_GetServerChainResponse.Size(m)
}
func (m *GetServerChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetServerChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetServerChainResponse proto.InternalMessageInfo

func (m *GetServerChainResponse) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

type SetServerChainRequest struct {
	Ip                   string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port                 int32    `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Sni                  string   `protobuf:"bytes,3,opt,name=sni,proto3" json:"sni,omitempty"`
	Profile              string   `protobuf:"bytes,4,opt,name=profile,proto3" json:"profile,omitempty"`
	Chain                string   `protobuf:"bytes,5,opt,name=chain,proto3" json:"chain,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetServerChainRequest) Reset()         { *m = SetServerChainRequest{} }
func (m *SetServerChainRequest) String() string { return proto.CompactTextString(m) }
func (*SetServerChainRequest) ProtoMessage()    {}
func (*SetServerChainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3680e836ae35d891, []int{2}
}

func (m *SetServerChainRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetServerChainRequest.Unmarshal(m, b)
}
func (m *SetServerChainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetServerChainRequest.Marshal(b, m, deterministic)
}
func (m *SetServerChainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetServerChainRequest.Merge(m, src)
}
func (m *SetServerChainRequest) XXX_Size() int {
	return xxx_messageInfo_SetServerChainRequest.Size(m)
}
func (m *SetServerChainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetServerChainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetServerChainRequest proto.InternalMessageInfo

func (m *SetServerChainRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *SetServerChainRequest) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *SetServerChainRequest) GetSni() string {
	if m != nil {
		return m.Sni
	}
	return ""
}

func (m *SetServerChainRequest) GetProfile() string {
	if m != nil {
		return m.Profile
	}
	return ""
}

func (m *SetServerChainRequest) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

type SetServerChainResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetServerChainResponse) Reset()         { *m = SetServerChainResponse{} }
func (m *SetServerChainResponse) String() string { return proto.CompactTextString(m) }
func (*SetServerChainResponse) ProtoMessage()    {}
func (*SetServerChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3680e836ae35d891, []int{3}
}

func (m *SetServerChainResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetServerChainResponse.Unmarshal(m, b)
}
func (m *SetServerChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetServerChainResponse.Marshal(b, m, deterministic)
}
func (m *SetServerChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetServerChainResponse.Merge(m, src)
}
func (m *SetServerChainResponse) XXX_Size() int {
	return xxx_messageInfo_SetServerChainResponse.Size(m)
}
func (m *SetServerChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetServerChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetServerChainResponse proto.InternalMessageInfo

type VerifyChainRequest struct {
	Chain                string   `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	Dnsname              string   `protobuf:"bytes,2,opt,name=dnsname,proto3" json:"dnsname,omitempty"`
	Force                bool     `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VerifyChainRequest) Reset()         { *m = VerifyChainRequest{} }
func (m *VerifyChainRequest) String() string { return proto.CompactTextString(m) }
func (*VerifyChainRequest) ProtoMessage()    {}
func (*VerifyChainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3680e836ae35d891, []int{4}
}

func (m *VerifyChainRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VerifyChainRequest.Unmarshal(m, b)
}
func (m *VerifyChainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VerifyChainRequest.Marshal(b, m, deterministic)
}
func (m *VerifyChainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyChainRequest.Merge(m, src)
}
func (m *VerifyChainRequest) XXX_Size() int {
	return xxx_messageInfo_VerifyChainRequest.Size(m)
}
func (m *VerifyChainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyChainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyChainRequest proto.InternalMessageInfo

func (m *VerifyChainRequest) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *VerifyChainRequest) GetDnsname() string {
	if m != nil {
		return m.Dnsname
	}
	return ""
}

func (m *VerifyChainRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

type VerifyChainResponse struct {
	Invalid              bool     `protobuf:"varint,1,opt,name=invalid,proto3" json:"invalid,omitempty"`
	Reason               string   `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	TTL                  int32    `protobuf:"varint,3,opt,name=TTL,json=tTL,proto3" json:"TTL,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VerifyChainResponse) Reset()         { *m = VerifyChainResponse{} }
func (m *VerifyChainResponse) String() string { return proto.CompactTextString(m) }
func (*VerifyChainResponse) ProtoMessage()    {}
func (*VerifyChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3680e836ae35d891, []int{5}
}

func (m *VerifyChainResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VerifyChainResponse.Unmarshal(m, b)
}
func (m *VerifyChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VerifyChainResponse.Marshal(b, m, deterministic)
}
func (m *VerifyChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyChainResponse.Merge(m, src)
}
func (m *VerifyChainResponse) XXX_Size() int {
	return xxx_messageInfo_VerifyChainResponse.Size(m)
}
func (m *VerifyChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyChainResponse proto.InternalMessageInfo

func (m *VerifyChainResponse) GetInvalid() bool {
	if m != nil {
		return m.Invalid
	}
	return false
}

func (m *VerifyChainResponse) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *VerifyChainResponse) GetTTL() int32 {
	if m != nil {
		return m.TTL
	}
	return 0
}

type UploadCertsRequest struct {
	Certs                [][]byte `protobuf:"bytes,1,rep,name=certs,proto3" json:"certs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadCertsRequest) Reset()         { *m = UploadCertsRequest{} }
func (m *UploadCertsRequest) String() string { return proto.CompactTextString(m) }
func (*UploadCertsRequest) ProtoMessage()    {}
func (*UploadCertsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3680e836ae35d891, []int{6}
}

func (m *UploadCertsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadCertsRequest.Unmarshal(m, b)
}
func (m *UploadCertsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadCertsRequest.Marshal(b, m, deterministic)
}
func (m *UploadCertsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadCertsRequest.Merge(m, src)
}
func (m *UploadCertsRequest) XXX_Size() int {
	return xxx_messageInfo_UploadCertsRequest.Size(m)
}
func (m *UploadCertsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadCertsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UploadCertsRequest proto.InternalMessageInfo

func (m *UploadCertsRequest) GetCerts() [][]byte {
	if m != nil {
		return m.Certs
	}
	return nil
}

type UploadCertsResponse struct {
	Chain                string   `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadCertsResponse) Reset()         { *m = UploadCertsResponse{} }
func (m *UploadCertsResponse) String() string { return proto.CompactTextString(m) }
func (*UploadCertsResponse) ProtoMessage()    {}
func (*UploadCertsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3680e836ae35d891, []int{7}
}

func (m *UploadCertsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadCertsResponse.Unmarshal(m, b)
}
func (m *UploadCertsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadCertsResponse.Marshal(b, m, deterministic)
}
func (m *UploadCertsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadCertsResponse.Merge(m, src)
}
func (m *UploadCertsResponse) XXX_Size() int {
	return xxx_messageInfo_UploadCertsResponse.Size(m)
}
func (m *UploadCertsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadCertsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UploadCertsResponse proto.InternalMessageInfo

func (m *UploadCertsResponse) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

type DownloadCertsRequest struct {
	Chain                string   `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DownloadCertsRequest) Reset()         { *m = DownloadCertsRequest{} }
func (m *DownloadCertsRequest) String() string { return proto.CompactTextString(m) }
func (*DownloadCertsRequest) ProtoMessage()    {}
func (*DownloadCertsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3680e836ae35d891, []int{8}
}

func (m *DownloadCertsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DownloadCertsRequest.Unmarshal(m, b)
}
func (m *DownloadCertsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DownloadCertsRequest.Marshal(b, m, deterministic)
}
func (m *DownloadCertsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownloadCertsRequest.Merge(m, src)
}
func (m *DownloadCertsRequest) XXX_Size() int {
	return xxx_messageInfo_DownloadCertsRequest.Size(m)
}
func (m *DownloadCertsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DownloadCertsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DownloadCertsRequest proto.InternalMessageInfo

func (m *DownloadCertsRequest) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

type DownloadCertsResponse struct {
	Certs                [][]byte `protobuf:"bytes,1,rep,name=certs,proto3" json:"certs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DownloadCertsResponse) Reset()         { *m = DownloadCertsResponse{} }
func (m *DownloadCertsResponse) String() string { return proto.CompactTextString(m) }
func (*DownloadCertsResponse) ProtoMessage()    {}
func (*DownloadCertsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3680e836ae35d891, []int{9}
}

func (m *DownloadCertsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DownloadCertsResponse.Unmarshal(m, b)
}
func (m *DownloadCertsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DownloadCertsResponse.Marshal(b, m, deterministic)
}
func (m *DownloadCertsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownloadCertsResponse.Merge(m, src)
}
func (m *DownloadCertsResponse) XXX_Size() int {
	return xxx_messageInfo_DownloadCertsResponse.Size(m)
}
func (m *DownloadCertsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DownloadCertsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DownloadCertsResponse proto.InternalMessageInfo

func (m *DownloadCertsResponse) GetCerts() [][]byte {
	if m != nil {
		return m.Certs
	}
	return nil
}

func init() {
	proto.RegisterType((*GetServerChainRequest)(nil), "luids.tlsutil.v1.GetServerChainRequest")
	proto.RegisterType((*GetServerChainResponse)(nil), "luids.tlsutil.v1.GetServerChainResponse")
	proto.RegisterType((*SetServerChainRequest)(nil), "luids.tlsutil.v1.SetServerChainRequest")
	proto.RegisterType((*SetServerChainResponse)(nil), "luids.tlsutil.v1.SetServerChainResponse")
	proto.RegisterType((*VerifyChainRequest)(nil), "luids.tlsutil.v1.VerifyChainRequest")
	proto.RegisterType((*VerifyChainResponse)(nil), "luids.tlsutil.v1.VerifyChainResponse")
	proto.RegisterType((*UploadCertsRequest)(nil), "luids.tlsutil.v1.UploadCertsRequest")
	proto.RegisterType((*UploadCertsResponse)(nil), "luids.tlsutil.v1.UploadCertsResponse")
	proto.RegisterType((*DownloadCertsRequest)(nil), "luids.tlsutil.v1.DownloadCertsRequest")
	proto.RegisterType((*DownloadCertsResponse)(nil), "luids.tlsutil.v1.DownloadCertsResponse")
}

func init() { proto.RegisterFile("notary.proto", fileDescriptor_3680e836ae35d891) }

var fileDescriptor_3680e836ae35d891 = []byte{
	// 451 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0xcf, 0x6f, 0xd3, 0x30,
	0x18, 0x5d, 0x9b, 0xb5, 0xdb, 0x3e, 0x46, 0x35, 0x79, 0x6b, 0x65, 0xf5, 0x54, 0x59, 0x40, 0xcb,
	0x8f, 0x25, 0x02, 0xfe, 0x03, 0x86, 0xc4, 0x65, 0xe2, 0xe0, 0x14, 0x24, 0x26, 0x2e, 0x69, 0xe3,
	0x76, 0x96, 0x32, 0xdb, 0xd8, 0x4e, 0xd1, 0x0e, 0xfc, 0xdb, 0x9c, 0x51, 0xdc, 0x74, 0x24, 0x8d,
	0xb5, 0x70, 0xe2, 0x96, 0x17, 0xbd, 0xef, 0x7d, 0x2f, 0xef, 0x7b, 0x0a, 0x9c, 0x0a, 0x69, 0x13,
	0x7d, 0x1f, 0x2a, 0x2d, 0xad, 0x44, 0x67, 0x59, 0xce, 0x53, 0x13, 0xda, 0xcc, 0xe4, 0x96, 0x67,
	0xe1, 0xe6, 0x2d, 0x59, 0xc3, 0xf0, 0x13, 0xb3, 0x31, 0xd3, 0x1b, 0xa6, 0xaf, 0x6e, 0x13, 0x2e,
	0x28, 0xfb, 0x91, 0x33, 0x63, 0xd1, 0x00, 0xba, 0x5c, 0xe1, 0xce, 0xa4, 0x33, 0x3b, 0xa1, 0x5d,
	0xae, 0x10, 0x82, 0x43, 0x25, 0xb5, 0xc5, 0xdd, 0x49, 0x67, 0xd6, 0xa3, 0xee, 0x19, 0x9d, 0x41,
	0x60, 0x04, 0xc7, 0x81, 0x23, 0x15, 0x8f, 0x08, 0xc3, 0x91, 0xd2, 0x72, 0xc5, 0x33, 0x86, 0x0f,
	0xdd, 0xdb, 0x1d, 0x24, 0x21, 0x8c, 0xf6, 0x17, 0x19, 0x25, 0x85, 0x61, 0xe8, 0x02, 0x7a, 0xcb,
	0xe2, 0x45, 0xb9, 0x6c, 0x0b, 0xc8, 0x2f, 0x18, 0xc6, 0xff, 0xc3, 0xd8, 0xdf, 0xf5, 0xbd, 0xea,
	0x7a, 0x0c, 0xa3, 0xd8, 0x6b, 0x97, 0xdc, 0x00, 0xfa, 0xca, 0x34, 0x5f, 0xdd, 0xd7, 0x5c, 0x79,
	0x3f, 0xa2, 0xd8, 0x9a, 0x0a, 0x23, 0x92, 0x3b, 0xe6, 0xec, 0x9d, 0xd0, 0x1d, 0x2c, 0xf8, 0x2b,
	0xa9, 0x97, 0xcc, 0x79, 0x3c, 0xa6, 0x5b, 0x40, 0xbe, 0xc1, 0x79, 0x4d, 0xbb, 0x4c, 0x08, 0xc3,
	0x11, 0x17, 0x9b, 0x24, 0xe3, 0xa9, 0x93, 0x3f, 0xa6, 0x3b, 0x88, 0x46, 0xd0, 0xd7, 0x2c, 0x31,
	0x52, 0x94, 0xfa, 0x25, 0x2a, 0x02, 0x98, 0xcf, 0xaf, 0x9d, 0x78, 0x8f, 0x06, 0x76, 0x7e, 0x4d,
	0x5e, 0x01, 0xfa, 0xa2, 0x32, 0x99, 0xa4, 0x57, 0x4c, 0x5b, 0x53, 0xb5, 0x5d, 0x60, 0xdc, 0x99,
	0x04, 0xb3, 0x53, 0xba, 0x05, 0xe4, 0x35, 0x9c, 0xd7, 0xb8, 0x8f, 0x1e, 0xea, 0x0d, 0x5c, 0x7c,
	0x94, 0x3f, 0x85, 0x57, 0xba, 0xc9, 0xbe, 0x84, 0xe1, 0x1e, 0xbb, 0x22, 0xde, 0x70, 0xf2, 0xee,
	0x77, 0x00, 0xfd, 0xcf, 0xae, 0xc1, 0x88, 0xc1, 0xa0, 0x5e, 0x20, 0x34, 0x0d, 0xf7, 0xeb, 0x1c,
	0x7a, 0xbb, 0x3c, 0x9e, 0xb5, 0x13, 0xcb, 0xe3, 0x1e, 0xa0, 0xef, 0xf0, 0xa4, 0x72, 0x02, 0xf4,
	0xac, 0x39, 0xda, 0xbc, 0xfe, 0xf8, 0x79, 0x0b, 0xeb, 0x41, 0x7d, 0x01, 0x4f, 0x6b, 0x9f, 0x8f,
	0x5e, 0x34, 0x27, 0x7d, 0x69, 0x8e, 0xa7, 0xad, 0xbc, 0x87, 0x1d, 0x0c, 0x06, 0x71, 0x6b, 0x50,
	0xf1, 0xbf, 0x06, 0x15, 0x3f, 0x12, 0x54, 0xa5, 0x24, 0xbe, 0xa0, 0x9a, 0x7d, 0xf3, 0x05, 0xe5,
	0x69, 0x1a, 0x39, 0xf8, 0xf0, 0xf2, 0x66, 0xba, 0xe6, 0xf6, 0x36, 0x5f, 0x84, 0x4b, 0x79, 0x17,
	0xb9, 0xa1, 0x4b, 0x2e, 0xa3, 0x44, 0xf1, 0xa8, 0x9c, 0x8d, 0xd6, 0x5a, 0x2d, 0x23, 0xb5, 0x58,
	0xf4, 0xdd, 0xbf, 0xed, 0xfd, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x35, 0x77, 0xb0, 0xa8, 0xeb,
	0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NotaryClient is the client API for Notary service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NotaryClient interface {
	GetServerChain(ctx context.Context, in *GetServerChainRequest, opts ...grpc.CallOption) (*GetServerChainResponse, error)
	VerifyChain(ctx context.Context, in *VerifyChainRequest, opts ...grpc.CallOption) (*VerifyChainResponse, error)
	DownloadCerts(ctx context.Context, in *DownloadCertsRequest, opts ...grpc.CallOption) (*DownloadCertsResponse, error)
	SetServerChain(ctx context.Context, in *SetServerChainRequest, opts ...grpc.CallOption) (*SetServerChainResponse, error)
	UploadCerts(ctx context.Context, in *UploadCertsRequest, opts ...grpc.CallOption) (*UploadCertsResponse, error)
}

type notaryClient struct {
	cc *grpc.ClientConn
}

func NewNotaryClient(cc *grpc.ClientConn) NotaryClient {
	return &notaryClient{cc}
}

func (c *notaryClient) GetServerChain(ctx context.Context, in *GetServerChainRequest, opts ...grpc.CallOption) (*GetServerChainResponse, error) {
	out := new(GetServerChainResponse)
	err := c.cc.Invoke(ctx, "/luids.tlsutil.v1.Notary/GetServerChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) VerifyChain(ctx context.Context, in *VerifyChainRequest, opts ...grpc.CallOption) (*VerifyChainResponse, error) {
	out := new(VerifyChainResponse)
	err := c.cc.Invoke(ctx, "/luids.tlsutil.v1.Notary/VerifyChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) DownloadCerts(ctx context.Context, in *DownloadCertsRequest, opts ...grpc.CallOption) (*DownloadCertsResponse, error) {
	out := new(DownloadCertsResponse)
	err := c.cc.Invoke(ctx, "/luids.tlsutil.v1.Notary/DownloadCerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) SetServerChain(ctx context.Context, in *SetServerChainRequest, opts ...grpc.CallOption) (*SetServerChainResponse, error) {
	out := new(SetServerChainResponse)
	err := c.cc.Invoke(ctx, "/luids.tlsutil.v1.Notary/SetServerChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) UploadCerts(ctx context.Context, in *UploadCertsRequest, opts ...grpc.CallOption) (*UploadCertsResponse, error) {
	out := new(UploadCertsResponse)
	err := c.cc.Invoke(ctx, "/luids.tlsutil.v1.Notary/UploadCerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotaryServer is the server API for Notary service.
type NotaryServer interface {
	GetServerChain(context.Context, *GetServerChainRequest) (*GetServerChainResponse, error)
	VerifyChain(context.Context, *VerifyChainRequest) (*VerifyChainResponse, error)
	DownloadCerts(context.Context, *DownloadCertsRequest) (*DownloadCertsResponse, error)
	SetServerChain(context.Context, *SetServerChainRequest) (*SetServerChainResponse, error)
	UploadCerts(context.Context, *UploadCertsRequest) (*UploadCertsResponse, error)
}

// UnimplementedNotaryServer can be embedded to have forward compatible implementations.
type UnimplementedNotaryServer struct {
}

func (*UnimplementedNotaryServer) GetServerChain(ctx context.Context, req *GetServerChainRequest) (*GetServerChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerChain not implemented")
}
func (*UnimplementedNotaryServer) VerifyChain(ctx context.Context, req *VerifyChainRequest) (*VerifyChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyChain not implemented")
}
func (*UnimplementedNotaryServer) DownloadCerts(ctx context.Context, req *DownloadCertsRequest) (*DownloadCertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadCerts not implemented")
}
func (*UnimplementedNotaryServer) SetServerChain(ctx context.Context, req *SetServerChainRequest) (*SetServerChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetServerChain not implemented")
}
func (*UnimplementedNotaryServer) UploadCerts(ctx context.Context, req *UploadCertsRequest) (*UploadCertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadCerts not implemented")
}

func RegisterNotaryServer(s *grpc.Server, srv NotaryServer) {
	s.RegisterService(&_Notary_serviceDesc, srv)
}

func _Notary_GetServerChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).GetServerChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luids.tlsutil.v1.Notary/GetServerChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).GetServerChain(ctx, req.(*GetServerChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_VerifyChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).VerifyChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luids.tlsutil.v1.Notary/VerifyChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).VerifyChain(ctx, req.(*VerifyChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_DownloadCerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadCertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).DownloadCerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luids.tlsutil.v1.Notary/DownloadCerts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).DownloadCerts(ctx, req.(*DownloadCertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_SetServerChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetServerChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).SetServerChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luids.tlsutil.v1.Notary/SetServerChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).SetServerChain(ctx, req.(*SetServerChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_UploadCerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadCertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).UploadCerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luids.tlsutil.v1.Notary/UploadCerts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).UploadCerts(ctx, req.(*UploadCertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Notary_serviceDesc = grpc.ServiceDesc{
	ServiceName: "luids.tlsutil.v1.Notary",
	HandlerType: (*NotaryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServerChain",
			Handler:    _Notary_GetServerChain_Handler,
		},
		{
			MethodName: "VerifyChain",
			Handler:    _Notary_VerifyChain_Handler,
		},
		{
			MethodName: "DownloadCerts",
			Handler:    _Notary_DownloadCerts_Handler,
		},
		{
			MethodName: "SetServerChain",
			Handler:    _Notary_SetServerChain_Handler,
		},
		{
			MethodName: "UploadCerts",
			Handler:    _Notary_UploadCerts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notary.proto",
}
