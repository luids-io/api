// Copyright 2020 Luis Guill√©n Civera <luisguillenc@gmail.com>. View LICENSE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.6.1
// source: notary.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetServerChainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip      string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port    int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Sni     string `protobuf:"bytes,3,opt,name=sni,proto3" json:"sni,omitempty"`
	Profile string `protobuf:"bytes,4,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (x *GetServerChainRequest) Reset() {
	*x = GetServerChainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notary_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServerChainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerChainRequest) ProtoMessage() {}

func (x *GetServerChainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notary_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerChainRequest.ProtoReflect.Descriptor instead.
func (*GetServerChainRequest) Descriptor() ([]byte, []int) {
	return file_notary_proto_rawDescGZIP(), []int{0}
}

func (x *GetServerChainRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *GetServerChainRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *GetServerChainRequest) GetSni() string {
	if x != nil {
		return x.Sni
	}
	return ""
}

func (x *GetServerChainRequest) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

type GetServerChainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
}

func (x *GetServerChainResponse) Reset() {
	*x = GetServerChainResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notary_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServerChainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerChainResponse) ProtoMessage() {}

func (x *GetServerChainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_notary_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerChainResponse.ProtoReflect.Descriptor instead.
func (*GetServerChainResponse) Descriptor() ([]byte, []int) {
	return file_notary_proto_rawDescGZIP(), []int{1}
}

func (x *GetServerChainResponse) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

type SetServerChainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip      string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port    int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Sni     string `protobuf:"bytes,3,opt,name=sni,proto3" json:"sni,omitempty"`
	Profile string `protobuf:"bytes,4,opt,name=profile,proto3" json:"profile,omitempty"`
	Chain   string `protobuf:"bytes,5,opt,name=chain,proto3" json:"chain,omitempty"`
}

func (x *SetServerChainRequest) Reset() {
	*x = SetServerChainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notary_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetServerChainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetServerChainRequest) ProtoMessage() {}

func (x *SetServerChainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notary_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetServerChainRequest.ProtoReflect.Descriptor instead.
func (*SetServerChainRequest) Descriptor() ([]byte, []int) {
	return file_notary_proto_rawDescGZIP(), []int{2}
}

func (x *SetServerChainRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *SetServerChainRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *SetServerChainRequest) GetSni() string {
	if x != nil {
		return x.Sni
	}
	return ""
}

func (x *SetServerChainRequest) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

func (x *SetServerChainRequest) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

type SetServerChainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetServerChainResponse) Reset() {
	*x = SetServerChainResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notary_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetServerChainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetServerChainResponse) ProtoMessage() {}

func (x *SetServerChainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_notary_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetServerChainResponse.ProtoReflect.Descriptor instead.
func (*SetServerChainResponse) Descriptor() ([]byte, []int) {
	return file_notary_proto_rawDescGZIP(), []int{3}
}

type VerifyChainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain   string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	Dnsname string `protobuf:"bytes,2,opt,name=dnsname,proto3" json:"dnsname,omitempty"`
	Force   bool   `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *VerifyChainRequest) Reset() {
	*x = VerifyChainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notary_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyChainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyChainRequest) ProtoMessage() {}

func (x *VerifyChainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notary_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyChainRequest.ProtoReflect.Descriptor instead.
func (*VerifyChainRequest) Descriptor() ([]byte, []int) {
	return file_notary_proto_rawDescGZIP(), []int{4}
}

func (x *VerifyChainRequest) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *VerifyChainRequest) GetDnsname() string {
	if x != nil {
		return x.Dnsname
	}
	return ""
}

func (x *VerifyChainRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type VerifyChainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invalid bool   `protobuf:"varint,1,opt,name=invalid,proto3" json:"invalid,omitempty"`
	Reason  string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	TTL     int32  `protobuf:"varint,3,opt,name=TTL,proto3" json:"TTL,omitempty"`
}

func (x *VerifyChainResponse) Reset() {
	*x = VerifyChainResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notary_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyChainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyChainResponse) ProtoMessage() {}

func (x *VerifyChainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_notary_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyChainResponse.ProtoReflect.Descriptor instead.
func (*VerifyChainResponse) Descriptor() ([]byte, []int) {
	return file_notary_proto_rawDescGZIP(), []int{5}
}

func (x *VerifyChainResponse) GetInvalid() bool {
	if x != nil {
		return x.Invalid
	}
	return false
}

func (x *VerifyChainResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *VerifyChainResponse) GetTTL() int32 {
	if x != nil {
		return x.TTL
	}
	return 0
}

type UploadCertsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Certs [][]byte `protobuf:"bytes,1,rep,name=certs,proto3" json:"certs,omitempty"`
}

func (x *UploadCertsRequest) Reset() {
	*x = UploadCertsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notary_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadCertsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadCertsRequest) ProtoMessage() {}

func (x *UploadCertsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notary_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadCertsRequest.ProtoReflect.Descriptor instead.
func (*UploadCertsRequest) Descriptor() ([]byte, []int) {
	return file_notary_proto_rawDescGZIP(), []int{6}
}

func (x *UploadCertsRequest) GetCerts() [][]byte {
	if x != nil {
		return x.Certs
	}
	return nil
}

type UploadCertsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
}

func (x *UploadCertsResponse) Reset() {
	*x = UploadCertsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notary_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadCertsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadCertsResponse) ProtoMessage() {}

func (x *UploadCertsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_notary_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadCertsResponse.ProtoReflect.Descriptor instead.
func (*UploadCertsResponse) Descriptor() ([]byte, []int) {
	return file_notary_proto_rawDescGZIP(), []int{7}
}

func (x *UploadCertsResponse) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

type DownloadCertsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
}

func (x *DownloadCertsRequest) Reset() {
	*x = DownloadCertsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notary_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadCertsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadCertsRequest) ProtoMessage() {}

func (x *DownloadCertsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notary_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadCertsRequest.ProtoReflect.Descriptor instead.
func (*DownloadCertsRequest) Descriptor() ([]byte, []int) {
	return file_notary_proto_rawDescGZIP(), []int{8}
}

func (x *DownloadCertsRequest) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

type DownloadCertsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Certs [][]byte `protobuf:"bytes,1,rep,name=certs,proto3" json:"certs,omitempty"`
}

func (x *DownloadCertsResponse) Reset() {
	*x = DownloadCertsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notary_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadCertsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadCertsResponse) ProtoMessage() {}

func (x *DownloadCertsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_notary_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadCertsResponse.ProtoReflect.Descriptor instead.
func (*DownloadCertsResponse) Descriptor() ([]byte, []int) {
	return file_notary_proto_rawDescGZIP(), []int{9}
}

func (x *DownloadCertsResponse) GetCerts() [][]byte {
	if x != nil {
		return x.Certs
	}
	return nil
}

var File_notary_proto protoreflect.FileDescriptor

var file_notary_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x61, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10,
	0x6c, 0x75, 0x69, 0x64, 0x73, 0x2e, 0x74, 0x6c, 0x73, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x76, 0x31,
	0x22, 0x67, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x6e, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x6e, 0x69, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x2e, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x22, 0x7d, 0x0a, 0x15, 0x53, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6e, 0x69, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x6e, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x22, 0x18, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x5a, 0x0a, 0x12, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x6e, 0x73, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x64, 0x6e, 0x73, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x59,
	0x0a, 0x13, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x54, 0x4c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x54, 0x54, 0x4c, 0x22, 0x2a, 0x0a, 0x12, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x43, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x65, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05,
	0x63, 0x65, 0x72, 0x74, 0x73, 0x22, 0x2b, 0x0a, 0x13, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43,
	0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x22, 0x2c, 0x0a, 0x14, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x65,
	0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x22, 0x2d, 0x0a, 0x15, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x65, 0x72, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x65, 0x72,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x65, 0x72, 0x74, 0x73, 0x32,
	0xf6, 0x03, 0x0a, 0x06, 0x4e, 0x6f, 0x74, 0x61, 0x72, 0x79, 0x12, 0x65, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x27, 0x2e, 0x6c,
	0x75, 0x69, 0x64, 0x73, 0x2e, 0x74, 0x6c, 0x73, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6c, 0x75, 0x69, 0x64, 0x73, 0x2e, 0x74, 0x6c,
	0x73, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x5c, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x12, 0x24, 0x2e, 0x6c, 0x75, 0x69, 0x64, 0x73, 0x2e, 0x74, 0x6c, 0x73, 0x75, 0x74, 0x69, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6c, 0x75, 0x69, 0x64, 0x73, 0x2e, 0x74,
	0x6c, 0x73, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x62, 0x0a, 0x0d, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x65, 0x72, 0x74, 0x73,
	0x12, 0x26, 0x2e, 0x6c, 0x75, 0x69, 0x64, 0x73, 0x2e, 0x74, 0x6c, 0x73, 0x75, 0x74, 0x69, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x65, 0x72, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6c, 0x75, 0x69, 0x64, 0x73,
	0x2e, 0x74, 0x6c, 0x73, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x27, 0x2e, 0x6c, 0x75, 0x69, 0x64, 0x73, 0x2e, 0x74, 0x6c,
	0x73, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x6c, 0x75, 0x69, 0x64, 0x73, 0x2e, 0x74, 0x6c, 0x73, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0b, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x65, 0x72, 0x74, 0x73, 0x12, 0x24, 0x2e, 0x6c, 0x75, 0x69, 0x64,
	0x73, 0x2e, 0x74, 0x6c, 0x73, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x43, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x6c, 0x75, 0x69, 0x64, 0x73, 0x2e, 0x74, 0x6c, 0x73, 0x75, 0x74, 0x69, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x75, 0x69, 0x64, 0x73, 0x2d, 0x69, 0x6f, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x74, 0x6c, 0x73, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x67, 0x72, 0x70, 0x63,
	0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_notary_proto_rawDescOnce sync.Once
	file_notary_proto_rawDescData = file_notary_proto_rawDesc
)

func file_notary_proto_rawDescGZIP() []byte {
	file_notary_proto_rawDescOnce.Do(func() {
		file_notary_proto_rawDescData = protoimpl.X.CompressGZIP(file_notary_proto_rawDescData)
	})
	return file_notary_proto_rawDescData
}

var file_notary_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_notary_proto_goTypes = []interface{}{
	(*GetServerChainRequest)(nil),  // 0: luids.tlsutil.v1.GetServerChainRequest
	(*GetServerChainResponse)(nil), // 1: luids.tlsutil.v1.GetServerChainResponse
	(*SetServerChainRequest)(nil),  // 2: luids.tlsutil.v1.SetServerChainRequest
	(*SetServerChainResponse)(nil), // 3: luids.tlsutil.v1.SetServerChainResponse
	(*VerifyChainRequest)(nil),     // 4: luids.tlsutil.v1.VerifyChainRequest
	(*VerifyChainResponse)(nil),    // 5: luids.tlsutil.v1.VerifyChainResponse
	(*UploadCertsRequest)(nil),     // 6: luids.tlsutil.v1.UploadCertsRequest
	(*UploadCertsResponse)(nil),    // 7: luids.tlsutil.v1.UploadCertsResponse
	(*DownloadCertsRequest)(nil),   // 8: luids.tlsutil.v1.DownloadCertsRequest
	(*DownloadCertsResponse)(nil),  // 9: luids.tlsutil.v1.DownloadCertsResponse
}
var file_notary_proto_depIdxs = []int32{
	0, // 0: luids.tlsutil.v1.Notary.GetServerChain:input_type -> luids.tlsutil.v1.GetServerChainRequest
	4, // 1: luids.tlsutil.v1.Notary.VerifyChain:input_type -> luids.tlsutil.v1.VerifyChainRequest
	8, // 2: luids.tlsutil.v1.Notary.DownloadCerts:input_type -> luids.tlsutil.v1.DownloadCertsRequest
	2, // 3: luids.tlsutil.v1.Notary.SetServerChain:input_type -> luids.tlsutil.v1.SetServerChainRequest
	6, // 4: luids.tlsutil.v1.Notary.UploadCerts:input_type -> luids.tlsutil.v1.UploadCertsRequest
	1, // 5: luids.tlsutil.v1.Notary.GetServerChain:output_type -> luids.tlsutil.v1.GetServerChainResponse
	5, // 6: luids.tlsutil.v1.Notary.VerifyChain:output_type -> luids.tlsutil.v1.VerifyChainResponse
	9, // 7: luids.tlsutil.v1.Notary.DownloadCerts:output_type -> luids.tlsutil.v1.DownloadCertsResponse
	3, // 8: luids.tlsutil.v1.Notary.SetServerChain:output_type -> luids.tlsutil.v1.SetServerChainResponse
	7, // 9: luids.tlsutil.v1.Notary.UploadCerts:output_type -> luids.tlsutil.v1.UploadCertsResponse
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_notary_proto_init() }
func file_notary_proto_init() {
	if File_notary_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_notary_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServerChainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notary_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServerChainResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notary_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetServerChainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notary_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetServerChainResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notary_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyChainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notary_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyChainResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notary_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadCertsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notary_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadCertsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notary_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadCertsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notary_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadCertsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_notary_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_notary_proto_goTypes,
		DependencyIndexes: file_notary_proto_depIdxs,
		MessageInfos:      file_notary_proto_msgTypes,
	}.Build()
	File_notary_proto = out.File
	file_notary_proto_rawDesc = nil
	file_notary_proto_goTypes = nil
	file_notary_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NotaryClient is the client API for Notary service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NotaryClient interface {
	GetServerChain(ctx context.Context, in *GetServerChainRequest, opts ...grpc.CallOption) (*GetServerChainResponse, error)
	VerifyChain(ctx context.Context, in *VerifyChainRequest, opts ...grpc.CallOption) (*VerifyChainResponse, error)
	DownloadCerts(ctx context.Context, in *DownloadCertsRequest, opts ...grpc.CallOption) (*DownloadCertsResponse, error)
	SetServerChain(ctx context.Context, in *SetServerChainRequest, opts ...grpc.CallOption) (*SetServerChainResponse, error)
	UploadCerts(ctx context.Context, in *UploadCertsRequest, opts ...grpc.CallOption) (*UploadCertsResponse, error)
}

type notaryClient struct {
	cc grpc.ClientConnInterface
}

func NewNotaryClient(cc grpc.ClientConnInterface) NotaryClient {
	return &notaryClient{cc}
}

func (c *notaryClient) GetServerChain(ctx context.Context, in *GetServerChainRequest, opts ...grpc.CallOption) (*GetServerChainResponse, error) {
	out := new(GetServerChainResponse)
	err := c.cc.Invoke(ctx, "/luids.tlsutil.v1.Notary/GetServerChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) VerifyChain(ctx context.Context, in *VerifyChainRequest, opts ...grpc.CallOption) (*VerifyChainResponse, error) {
	out := new(VerifyChainResponse)
	err := c.cc.Invoke(ctx, "/luids.tlsutil.v1.Notary/VerifyChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) DownloadCerts(ctx context.Context, in *DownloadCertsRequest, opts ...grpc.CallOption) (*DownloadCertsResponse, error) {
	out := new(DownloadCertsResponse)
	err := c.cc.Invoke(ctx, "/luids.tlsutil.v1.Notary/DownloadCerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) SetServerChain(ctx context.Context, in *SetServerChainRequest, opts ...grpc.CallOption) (*SetServerChainResponse, error) {
	out := new(SetServerChainResponse)
	err := c.cc.Invoke(ctx, "/luids.tlsutil.v1.Notary/SetServerChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) UploadCerts(ctx context.Context, in *UploadCertsRequest, opts ...grpc.CallOption) (*UploadCertsResponse, error) {
	out := new(UploadCertsResponse)
	err := c.cc.Invoke(ctx, "/luids.tlsutil.v1.Notary/UploadCerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotaryServer is the server API for Notary service.
type NotaryServer interface {
	GetServerChain(context.Context, *GetServerChainRequest) (*GetServerChainResponse, error)
	VerifyChain(context.Context, *VerifyChainRequest) (*VerifyChainResponse, error)
	DownloadCerts(context.Context, *DownloadCertsRequest) (*DownloadCertsResponse, error)
	SetServerChain(context.Context, *SetServerChainRequest) (*SetServerChainResponse, error)
	UploadCerts(context.Context, *UploadCertsRequest) (*UploadCertsResponse, error)
}

// UnimplementedNotaryServer can be embedded to have forward compatible implementations.
type UnimplementedNotaryServer struct {
}

func (*UnimplementedNotaryServer) GetServerChain(context.Context, *GetServerChainRequest) (*GetServerChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerChain not implemented")
}
func (*UnimplementedNotaryServer) VerifyChain(context.Context, *VerifyChainRequest) (*VerifyChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyChain not implemented")
}
func (*UnimplementedNotaryServer) DownloadCerts(context.Context, *DownloadCertsRequest) (*DownloadCertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadCerts not implemented")
}
func (*UnimplementedNotaryServer) SetServerChain(context.Context, *SetServerChainRequest) (*SetServerChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetServerChain not implemented")
}
func (*UnimplementedNotaryServer) UploadCerts(context.Context, *UploadCertsRequest) (*UploadCertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadCerts not implemented")
}

func RegisterNotaryServer(s *grpc.Server, srv NotaryServer) {
	s.RegisterService(&_Notary_serviceDesc, srv)
}

func _Notary_GetServerChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).GetServerChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luids.tlsutil.v1.Notary/GetServerChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).GetServerChain(ctx, req.(*GetServerChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_VerifyChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).VerifyChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luids.tlsutil.v1.Notary/VerifyChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).VerifyChain(ctx, req.(*VerifyChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_DownloadCerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadCertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).DownloadCerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luids.tlsutil.v1.Notary/DownloadCerts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).DownloadCerts(ctx, req.(*DownloadCertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_SetServerChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetServerChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).SetServerChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luids.tlsutil.v1.Notary/SetServerChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).SetServerChain(ctx, req.(*SetServerChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_UploadCerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadCertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).UploadCerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luids.tlsutil.v1.Notary/UploadCerts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).UploadCerts(ctx, req.(*UploadCertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Notary_serviceDesc = grpc.ServiceDesc{
	ServiceName: "luids.tlsutil.v1.Notary",
	HandlerType: (*NotaryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServerChain",
			Handler:    _Notary_GetServerChain_Handler,
		},
		{
			MethodName: "VerifyChain",
			Handler:    _Notary_VerifyChain_Handler,
		},
		{
			MethodName: "DownloadCerts",
			Handler:    _Notary_DownloadCerts_Handler,
		},
		{
			MethodName: "SetServerChain",
			Handler:    _Notary_SetServerChain_Handler,
		},
		{
			MethodName: "UploadCerts",
			Handler:    _Notary_UploadCerts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notary.proto",
}
