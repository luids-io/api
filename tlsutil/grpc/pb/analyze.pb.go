// Code generated by protoc-gen-go. DO NOT EDIT.
// source: analyze.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MsgType int32

const (
	MsgType_DATA  MsgType = 0
	MsgType_OPEN  MsgType = 1
	MsgType_CLOSE MsgType = 2
)

var MsgType_name = map[int32]string{
	0: "DATA",
	1: "OPEN",
	2: "CLOSE",
}

var MsgType_value = map[string]int32{
	"DATA":  0,
	"OPEN":  1,
	"CLOSE": 2,
}

func (x MsgType) String() string {
	return proto.EnumName(MsgType_name, int32(x))
}

func (MsgType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_76c3eb6de5a1604f, []int{0}
}

type SendMessageRequest struct {
	Type                 MsgType  `protobuf:"varint,1,opt,name=type,proto3,enum=luids.tlsutil.v1.MsgType" json:"type,omitempty"`
	StreamId             int64    `protobuf:"varint,2,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	Open                 *MsgOpen `protobuf:"bytes,4,opt,name=open,proto3" json:"open,omitempty"`
	Data                 *MsgData `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendMessageRequest) Reset()         { *m = SendMessageRequest{} }
func (m *SendMessageRequest) String() string { return proto.CompactTextString(m) }
func (*SendMessageRequest) ProtoMessage()    {}
func (*SendMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_76c3eb6de5a1604f, []int{0}
}

func (m *SendMessageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendMessageRequest.Unmarshal(m, b)
}
func (m *SendMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendMessageRequest.Marshal(b, m, deterministic)
}
func (m *SendMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendMessageRequest.Merge(m, src)
}
func (m *SendMessageRequest) XXX_Size() int {
	return xxx_messageInfo_SendMessageRequest.Size(m)
}
func (m *SendMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendMessageRequest proto.InternalMessageInfo

func (m *SendMessageRequest) GetType() MsgType {
	if m != nil {
		return m.Type
	}
	return MsgType_DATA
}

func (m *SendMessageRequest) GetStreamId() int64 {
	if m != nil {
		return m.StreamId
	}
	return 0
}

func (m *SendMessageRequest) GetOpen() *MsgOpen {
	if m != nil {
		return m.Open
	}
	return nil
}

func (m *SendMessageRequest) GetData() *MsgData {
	if m != nil {
		return m.Data
	}
	return nil
}

type MsgOpen struct {
	SourceIp             string   `protobuf:"bytes,1,opt,name=source_ip,json=sourceIp,proto3" json:"source_ip,omitempty"`
	DestinationIp        string   `protobuf:"bytes,2,opt,name=destination_ip,json=destinationIp,proto3" json:"destination_ip,omitempty"`
	SourcePort           uint32   `protobuf:"varint,3,opt,name=source_port,json=sourcePort,proto3" json:"source_port,omitempty"`
	DestinationPort      uint32   `protobuf:"varint,4,opt,name=destination_port,json=destinationPort,proto3" json:"destination_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgOpen) Reset()         { *m = MsgOpen{} }
func (m *MsgOpen) String() string { return proto.CompactTextString(m) }
func (*MsgOpen) ProtoMessage()    {}
func (*MsgOpen) Descriptor() ([]byte, []int) {
	return fileDescriptor_76c3eb6de5a1604f, []int{1}
}

func (m *MsgOpen) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgOpen.Unmarshal(m, b)
}
func (m *MsgOpen) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgOpen.Marshal(b, m, deterministic)
}
func (m *MsgOpen) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgOpen.Merge(m, src)
}
func (m *MsgOpen) XXX_Size() int {
	return xxx_messageInfo_MsgOpen.Size(m)
}
func (m *MsgOpen) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgOpen.DiscardUnknown(m)
}

var xxx_messageInfo_MsgOpen proto.InternalMessageInfo

func (m *MsgOpen) GetSourceIp() string {
	if m != nil {
		return m.SourceIp
	}
	return ""
}

func (m *MsgOpen) GetDestinationIp() string {
	if m != nil {
		return m.DestinationIp
	}
	return ""
}

func (m *MsgOpen) GetSourcePort() uint32 {
	if m != nil {
		return m.SourcePort
	}
	return 0
}

func (m *MsgOpen) GetDestinationPort() uint32 {
	if m != nil {
		return m.DestinationPort
	}
	return 0
}

type MsgData struct {
	Timestamp            *timestamp.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Bytes                int32                `protobuf:"varint,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
	SawStart             bool                 `protobuf:"varint,3,opt,name=saw_start,json=sawStart,proto3" json:"saw_start,omitempty"`
	SawEnd               bool                 `protobuf:"varint,4,opt,name=saw_end,json=sawEnd,proto3" json:"saw_end,omitempty"`
	Records              [][]byte             `protobuf:"bytes,5,rep,name=records,proto3" json:"records,omitempty"`
	MsgErr               string               `protobuf:"bytes,6,opt,name=msg_err,json=msgErr,proto3" json:"msg_err,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *MsgData) Reset()         { *m = MsgData{} }
func (m *MsgData) String() string { return proto.CompactTextString(m) }
func (*MsgData) ProtoMessage()    {}
func (*MsgData) Descriptor() ([]byte, []int) {
	return fileDescriptor_76c3eb6de5a1604f, []int{2}
}

func (m *MsgData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgData.Unmarshal(m, b)
}
func (m *MsgData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgData.Marshal(b, m, deterministic)
}
func (m *MsgData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgData.Merge(m, src)
}
func (m *MsgData) XXX_Size() int {
	return xxx_messageInfo_MsgData.Size(m)
}
func (m *MsgData) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgData.DiscardUnknown(m)
}

var xxx_messageInfo_MsgData proto.InternalMessageInfo

func (m *MsgData) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *MsgData) GetBytes() int32 {
	if m != nil {
		return m.Bytes
	}
	return 0
}

func (m *MsgData) GetSawStart() bool {
	if m != nil {
		return m.SawStart
	}
	return false
}

func (m *MsgData) GetSawEnd() bool {
	if m != nil {
		return m.SawEnd
	}
	return false
}

func (m *MsgData) GetRecords() [][]byte {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *MsgData) GetMsgErr() string {
	if m != nil {
		return m.MsgErr
	}
	return ""
}

func init() {
	proto.RegisterEnum("luids.tlsutil.v1.MsgType", MsgType_name, MsgType_value)
	proto.RegisterType((*SendMessageRequest)(nil), "luids.tlsutil.v1.SendMessageRequest")
	proto.RegisterType((*MsgOpen)(nil), "luids.tlsutil.v1.MsgOpen")
	proto.RegisterType((*MsgData)(nil), "luids.tlsutil.v1.MsgData")
}

func init() { proto.RegisterFile("analyze.proto", fileDescriptor_76c3eb6de5a1604f) }

var fileDescriptor_76c3eb6de5a1604f = []byte{
	// 506 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0x97, 0xfe, 0x4d, 0xdd, 0x75, 0x54, 0x16, 0x82, 0x50, 0x0e, 0x54, 0x15, 0x88, 0x0c,
	0x69, 0x89, 0xe8, 0x2e, 0x48, 0x9c, 0x0a, 0xcb, 0xa1, 0x12, 0xa3, 0x95, 0xdb, 0x13, 0x1c, 0x2a,
	0xa7, 0xf1, 0x8c, 0xa5, 0x24, 0x36, 0xb6, 0x43, 0x15, 0xbe, 0x09, 0x5f, 0x86, 0x03, 0x9f, 0x0c,
	0xd9, 0xc9, 0x58, 0x44, 0x05, 0xbb, 0x44, 0x7e, 0xdf, 0xfc, 0xde, 0x47, 0x8f, 0x5f, 0x3f, 0x60,
	0x84, 0x73, 0x9c, 0x96, 0xdf, 0x49, 0x20, 0x24, 0xd7, 0x1c, 0x8e, 0xd3, 0x82, 0x25, 0x2a, 0xd0,
	0xa9, 0x2a, 0x34, 0x4b, 0x83, 0x6f, 0xaf, 0x27, 0x97, 0x94, 0xe9, 0x2f, 0x45, 0x1c, 0xec, 0x79,
	0x16, 0x52, 0x9e, 0xe2, 0x9c, 0x86, 0x16, 0x8d, 0x8b, 0x9b, 0x50, 0xe8, 0x52, 0x10, 0x15, 0x92,
	0x4c, 0xe8, 0xb2, 0xfa, 0x56, 0x32, 0x93, 0xb7, 0xf7, 0x0f, 0x69, 0x96, 0x11, 0xa5, 0x71, 0x26,
	0xee, 0x4e, 0xd5, 0xf0, 0xec, 0xa7, 0x03, 0xe0, 0x86, 0xe4, 0xc9, 0x35, 0x51, 0x0a, 0x53, 0x82,
	0xc8, 0xd7, 0x82, 0x28, 0x0d, 0x2f, 0x40, 0xc7, 0x4c, 0x7a, 0xce, 0xd4, 0xf1, 0xcf, 0xe6, 0x4f,
	0x82, 0xbf, 0x9d, 0x06, 0xd7, 0x8a, 0x6e, 0x4b, 0x41, 0x90, 0xc5, 0xe0, 0x53, 0x30, 0x50, 0x5a,
	0x12, 0x9c, 0xed, 0x58, 0xe2, 0xb5, 0xa6, 0x8e, 0xdf, 0x46, 0x6e, 0xd5, 0x58, 0x26, 0x46, 0x8b,
	0x0b, 0x92, 0x7b, 0x9d, 0xa9, 0xe3, 0x0f, 0xff, 0xa1, 0xb5, 0x12, 0x24, 0x47, 0x16, 0x33, 0x78,
	0x82, 0x35, 0xf6, 0xba, 0xff, 0xc1, 0xaf, 0xb0, 0xc6, 0xc8, 0x62, 0xb3, 0x1f, 0x0e, 0xe8, 0xd7,
	0x02, 0xd6, 0x06, 0x2f, 0xe4, 0x9e, 0xec, 0x98, 0xb0, 0xd6, 0x07, 0xc8, 0xad, 0x1a, 0x4b, 0x01,
	0x5f, 0x80, 0xb3, 0x84, 0x28, 0xcd, 0x72, 0xac, 0x19, 0xcf, 0x0d, 0xd1, 0xb2, 0xc4, 0xa8, 0xd1,
	0x5d, 0x0a, 0xf8, 0x0c, 0x0c, 0x6b, 0x0d, 0xc1, 0xa5, 0xf6, 0xda, 0x53, 0xc7, 0x1f, 0x21, 0x50,
	0xb5, 0xd6, 0x5c, 0x6a, 0x78, 0x0e, 0xc6, 0x4d, 0x1d, 0x4b, 0x75, 0x2c, 0xf5, 0xa0, 0xd1, 0x37,
	0xe8, 0xec, 0x57, 0xe5, 0xcd, 0xb8, 0x85, 0x6f, 0xc0, 0xe0, 0xcf, 0xee, 0xad, 0xb7, 0xe1, 0x7c,
	0x12, 0x50, 0xce, 0x69, 0x5a, 0xc7, 0x21, 0x2e, 0x6e, 0x82, 0xed, 0x2d, 0x81, 0xee, 0x60, 0xf8,
	0x10, 0x74, 0xe3, 0x52, 0x13, 0x65, 0xfd, 0x76, 0x51, 0x55, 0xd8, 0xbb, 0xe2, 0xc3, 0x4e, 0x69,
	0x5c, 0xbb, 0x74, 0x91, 0xab, 0xf0, 0x61, 0x63, 0x6a, 0xf8, 0x18, 0xf4, 0xcd, 0x4f, 0x92, 0x27,
	0xd6, 0x9a, 0x8b, 0x7a, 0x0a, 0x1f, 0xa2, 0x3c, 0x81, 0x1e, 0xe8, 0x4b, 0xb2, 0xe7, 0x32, 0x51,
	0x5e, 0x77, 0xda, 0xf6, 0x4f, 0xd1, 0x6d, 0x69, 0x46, 0x32, 0x45, 0x77, 0x44, 0x4a, 0xaf, 0x67,
	0xf7, 0xd2, 0xcb, 0x14, 0x8d, 0xa4, 0x7c, 0xe5, 0xdb, 0x3b, 0x98, 0xc7, 0x86, 0x2e, 0xe8, 0x5c,
	0x2d, 0xb6, 0x8b, 0xf1, 0x89, 0x39, 0xad, 0xd6, 0xd1, 0xc7, 0xb1, 0x03, 0x07, 0xa0, 0xfb, 0xfe,
	0xc3, 0x6a, 0x13, 0x8d, 0x5b, 0xf3, 0xcf, 0xa0, 0xbf, 0xa8, 0x02, 0x0e, 0xd7, 0xe0, 0xb4, 0x91,
	0x2a, 0x05, 0x9f, 0x1f, 0x3f, 0xe3, 0x71, 0xea, 0x26, 0x8f, 0x8e, 0x16, 0x12, 0x99, 0x9c, 0xcf,
	0x4e, 0x7c, 0xe7, 0xdd, 0xf9, 0xa7, 0x97, 0x8d, 0x9c, 0x5b, 0xb5, 0x0b, 0xc6, 0x43, 0x2c, 0x58,
	0x58, 0x8b, 0x86, 0x54, 0x8a, 0x7d, 0x28, 0xe2, 0xb8, 0x67, 0xc7, 0x2f, 0x7f, 0x07, 0x00, 0x00,
	0xff, 0xff, 0x56, 0xba, 0xac, 0x81, 0x6f, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AnalyzeClient is the client API for Analyze service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AnalyzeClient interface {
	SendMessages(ctx context.Context, opts ...grpc.CallOption) (Analyze_SendMessagesClient, error)
}

type analyzeClient struct {
	cc *grpc.ClientConn
}

func NewAnalyzeClient(cc *grpc.ClientConn) AnalyzeClient {
	return &analyzeClient{cc}
}

func (c *analyzeClient) SendMessages(ctx context.Context, opts ...grpc.CallOption) (Analyze_SendMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Analyze_serviceDesc.Streams[0], "/luids.tlsutil.v1.Analyze/SendMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &analyzeSendMessagesClient{stream}
	return x, nil
}

type Analyze_SendMessagesClient interface {
	Send(*SendMessageRequest) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type analyzeSendMessagesClient struct {
	grpc.ClientStream
}

func (x *analyzeSendMessagesClient) Send(m *SendMessageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *analyzeSendMessagesClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AnalyzeServer is the server API for Analyze service.
type AnalyzeServer interface {
	SendMessages(Analyze_SendMessagesServer) error
}

// UnimplementedAnalyzeServer can be embedded to have forward compatible implementations.
type UnimplementedAnalyzeServer struct {
}

func (*UnimplementedAnalyzeServer) SendMessages(srv Analyze_SendMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMessages not implemented")
}

func RegisterAnalyzeServer(s *grpc.Server, srv AnalyzeServer) {
	s.RegisterService(&_Analyze_serviceDesc, srv)
}

func _Analyze_SendMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AnalyzeServer).SendMessages(&analyzeSendMessagesServer{stream})
}

type Analyze_SendMessagesServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*SendMessageRequest, error)
	grpc.ServerStream
}

type analyzeSendMessagesServer struct {
	grpc.ServerStream
}

func (x *analyzeSendMessagesServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *analyzeSendMessagesServer) Recv() (*SendMessageRequest, error) {
	m := new(SendMessageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Analyze_serviceDesc = grpc.ServiceDesc{
	ServiceName: "luids.tlsutil.v1.Analyze",
	HandlerType: (*AnalyzeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendMessages",
			Handler:       _Analyze_SendMessages_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "analyze.proto",
}
