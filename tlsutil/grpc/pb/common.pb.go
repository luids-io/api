// Copyright 2019 Luis Guill√©n Civera <luisguillenc@gmail.com>. View LICENSE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.6.1
// source: common.proto

package pb

import (
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CertificateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Digest string `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
	Raw    []byte `protobuf:"bytes,2,opt,name=raw,proto3" json:"raw,omitempty"`
}

func (x *CertificateData) Reset() {
	*x = CertificateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateData) ProtoMessage() {}

func (x *CertificateData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateData.ProtoReflect.Descriptor instead.
func (*CertificateData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

func (x *CertificateData) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *CertificateData) GetRaw() []byte {
	if x != nil {
		return x.Raw
	}
	return nil
}

type RecordData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId   string               `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	Timestamp  *timestamp.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Type       int32                `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Len        int32                `protobuf:"varint,4,opt,name=len,proto3" json:"len,omitempty"`
	Ciphered   bool                 `protobuf:"varint,5,opt,name=ciphered,proto3" json:"ciphered,omitempty"`
	Fragmented bool                 `protobuf:"varint,6,opt,name=fragmented,proto3" json:"fragmented,omitempty"`
	MsgsCount  int32                `protobuf:"varint,7,opt,name=msgs_count,json=msgsCount,proto3" json:"msgs_count,omitempty"`
}

func (x *RecordData) Reset() {
	*x = RecordData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordData) ProtoMessage() {}

func (x *RecordData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordData.ProtoReflect.Descriptor instead.
func (*RecordData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

func (x *RecordData) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *RecordData) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *RecordData) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RecordData) GetLen() int32 {
	if x != nil {
		return x.Len
	}
	return 0
}

func (x *RecordData) GetCiphered() bool {
	if x != nil {
		return x.Ciphered
	}
	return false
}

func (x *RecordData) GetFragmented() bool {
	if x != nil {
		return x.Fragmented
	}
	return false
}

func (x *RecordData) GetMsgsCount() int32 {
	if x != nil {
		return x.MsgsCount
	}
	return 0
}

type ConnectionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Info        *ConnectionData_ConnectionInfo  `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	SendStream  *ConnectionData_StreamData      `protobuf:"bytes,3,opt,name=send_stream,json=sendStream,proto3" json:"send_stream,omitempty"`
	RcvdStream  *ConnectionData_StreamData      `protobuf:"bytes,4,opt,name=rcvd_stream,json=rcvdStream,proto3" json:"rcvd_stream,omitempty"`
	ClientHello *ConnectionData_ClientHelloData `protobuf:"bytes,5,opt,name=client_hello,json=clientHello,proto3" json:"client_hello,omitempty"`
	ServerHello *ConnectionData_ServerHelloData `protobuf:"bytes,6,opt,name=server_hello,json=serverHello,proto3" json:"server_hello,omitempty"`
	ClientCerts []*ConnectionData_CertSummary   `protobuf:"bytes,7,rep,name=client_certs,json=clientCerts,proto3" json:"client_certs,omitempty"`
	ServerCerts []*ConnectionData_CertSummary   `protobuf:"bytes,8,rep,name=server_certs,json=serverCerts,proto3" json:"server_certs,omitempty"`
	Tags        []string                        `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *ConnectionData) Reset() {
	*x = ConnectionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionData) ProtoMessage() {}

func (x *ConnectionData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionData.ProtoReflect.Descriptor instead.
func (*ConnectionData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

func (x *ConnectionData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ConnectionData) GetInfo() *ConnectionData_ConnectionInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *ConnectionData) GetSendStream() *ConnectionData_StreamData {
	if x != nil {
		return x.SendStream
	}
	return nil
}

func (x *ConnectionData) GetRcvdStream() *ConnectionData_StreamData {
	if x != nil {
		return x.RcvdStream
	}
	return nil
}

func (x *ConnectionData) GetClientHello() *ConnectionData_ClientHelloData {
	if x != nil {
		return x.ClientHello
	}
	return nil
}

func (x *ConnectionData) GetServerHello() *ConnectionData_ServerHelloData {
	if x != nil {
		return x.ServerHello
	}
	return nil
}

func (x *ConnectionData) GetClientCerts() []*ConnectionData_CertSummary {
	if x != nil {
		return x.ClientCerts
	}
	return nil
}

func (x *ConnectionData) GetServerCerts() []*ConnectionData_CertSummary {
	if x != nil {
		return x.ServerCerts
	}
	return nil
}

func (x *ConnectionData) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type ConnectionData_ConnectionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start              *timestamp.Timestamp `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End                *timestamp.Timestamp `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
	DurationNsecs      int64                `protobuf:"varint,3,opt,name=duration_nsecs,json=durationNsecs,proto3" json:"duration_nsecs,omitempty"`
	ClientIp           string               `protobuf:"bytes,4,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty"`
	ServerIp           string               `protobuf:"bytes,5,opt,name=server_ip,json=serverIp,proto3" json:"server_ip,omitempty"`
	ClientPort         uint32               `protobuf:"varint,6,opt,name=client_port,json=clientPort,proto3" json:"client_port,omitempty"`
	ServerPort         uint32               `protobuf:"varint,7,opt,name=server_port,json=serverPort,proto3" json:"server_port,omitempty"`
	Uncompleted        bool                 `protobuf:"varint,8,opt,name=uncompleted,proto3" json:"uncompleted,omitempty"`
	DetectedError      bool                 `protobuf:"varint,9,opt,name=detected_error,json=detectedError,proto3" json:"detected_error,omitempty"`
	CompletedHandshake bool                 `protobuf:"varint,10,opt,name=completed_handshake,json=completedHandshake,proto3" json:"completed_handshake,omitempty"`
}

func (x *ConnectionData_ConnectionInfo) Reset() {
	*x = ConnectionData_ConnectionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionData_ConnectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionData_ConnectionInfo) ProtoMessage() {}

func (x *ConnectionData_ConnectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionData_ConnectionInfo.ProtoReflect.Descriptor instead.
func (*ConnectionData_ConnectionInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ConnectionData_ConnectionInfo) GetStart() *timestamp.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *ConnectionData_ConnectionInfo) GetEnd() *timestamp.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *ConnectionData_ConnectionInfo) GetDurationNsecs() int64 {
	if x != nil {
		return x.DurationNsecs
	}
	return 0
}

func (x *ConnectionData_ConnectionInfo) GetClientIp() string {
	if x != nil {
		return x.ClientIp
	}
	return ""
}

func (x *ConnectionData_ConnectionInfo) GetServerIp() string {
	if x != nil {
		return x.ServerIp
	}
	return ""
}

func (x *ConnectionData_ConnectionInfo) GetClientPort() uint32 {
	if x != nil {
		return x.ClientPort
	}
	return 0
}

func (x *ConnectionData_ConnectionInfo) GetServerPort() uint32 {
	if x != nil {
		return x.ServerPort
	}
	return 0
}

func (x *ConnectionData_ConnectionInfo) GetUncompleted() bool {
	if x != nil {
		return x.Uncompleted
	}
	return false
}

func (x *ConnectionData_ConnectionInfo) GetDetectedError() bool {
	if x != nil {
		return x.DetectedError
	}
	return false
}

func (x *ConnectionData_ConnectionInfo) GetCompletedHandshake() bool {
	if x != nil {
		return x.CompletedHandshake
	}
	return false
}

type ConnectionData_StreamData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                                       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Info          *ConnectionData_StreamData_StreamInfo        `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	PlaintextAcc  *ConnectionData_StreamData_PlaintextSummary  `protobuf:"bytes,3,opt,name=plaintext_acc,json=plaintextAcc,proto3" json:"plaintext_acc,omitempty"`
	CiphertextAcc *ConnectionData_StreamData_CiphertextSummary `protobuf:"bytes,4,opt,name=ciphertext_acc,json=ciphertextAcc,proto3" json:"ciphertext_acc,omitempty"`
	Handshakes    []*ConnectionData_StreamData_HandshakeItem   `protobuf:"bytes,5,rep,name=handshakes,proto3" json:"handshakes,omitempty"`
	HandshakeSum  int32                                        `protobuf:"varint,6,opt,name=handshake_sum,json=handshakeSum,proto3" json:"handshake_sum,omitempty"`
}

func (x *ConnectionData_StreamData) Reset() {
	*x = ConnectionData_StreamData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionData_StreamData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionData_StreamData) ProtoMessage() {}

func (x *ConnectionData_StreamData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionData_StreamData.ProtoReflect.Descriptor instead.
func (*ConnectionData_StreamData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2, 1}
}

func (x *ConnectionData_StreamData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ConnectionData_StreamData) GetInfo() *ConnectionData_StreamData_StreamInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *ConnectionData_StreamData) GetPlaintextAcc() *ConnectionData_StreamData_PlaintextSummary {
	if x != nil {
		return x.PlaintextAcc
	}
	return nil
}

func (x *ConnectionData_StreamData) GetCiphertextAcc() *ConnectionData_StreamData_CiphertextSummary {
	if x != nil {
		return x.CiphertextAcc
	}
	return nil
}

func (x *ConnectionData_StreamData) GetHandshakes() []*ConnectionData_StreamData_HandshakeItem {
	if x != nil {
		return x.Handshakes
	}
	return nil
}

func (x *ConnectionData_StreamData) GetHandshakeSum() int32 {
	if x != nil {
		return x.HandshakeSum
	}
	return 0
}

type ConnectionData_ExtensionItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Etype uint32 `protobuf:"varint,1,opt,name=etype,proto3" json:"etype,omitempty"`
	Len   uint32 `protobuf:"varint,2,opt,name=len,proto3" json:"len,omitempty"`
}

func (x *ConnectionData_ExtensionItem) Reset() {
	*x = ConnectionData_ExtensionItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionData_ExtensionItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionData_ExtensionItem) ProtoMessage() {}

func (x *ConnectionData_ExtensionItem) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionData_ExtensionItem.ProtoReflect.Descriptor instead.
func (*ConnectionData_ExtensionItem) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2, 2}
}

func (x *ConnectionData_ExtensionItem) GetEtype() uint32 {
	if x != nil {
		return x.Etype
	}
	return 0
}

func (x *ConnectionData_ExtensionItem) GetLen() uint32 {
	if x != nil {
		return x.Len
	}
	return 0
}

type ConnectionData_DecodedInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sni                 string   `protobuf:"bytes,1,opt,name=sni,proto3" json:"sni,omitempty"`
	SignatureSchemes    []uint32 `protobuf:"varint,2,rep,packed,name=signature_schemes,json=signatureSchemes,proto3" json:"signature_schemes,omitempty"`
	SupportedVersions   []uint32 `protobuf:"varint,3,rep,packed,name=supported_versions,json=supportedVersions,proto3" json:"supported_versions,omitempty"`
	SupportedGroups     []uint32 `protobuf:"varint,4,rep,packed,name=supported_groups,json=supportedGroups,proto3" json:"supported_groups,omitempty"`
	EcPointFormats      []uint32 `protobuf:"varint,5,rep,packed,name=ec_point_formats,json=ecPointFormats,proto3" json:"ec_point_formats,omitempty"`
	Oscp                bool     `protobuf:"varint,6,opt,name=oscp,proto3" json:"oscp,omitempty"`
	Alpns               []string `protobuf:"bytes,7,rep,name=alpns,proto3" json:"alpns,omitempty"`
	KeyShareEntries     []uint32 `protobuf:"varint,8,rep,packed,name=key_share_entries,json=keyShareEntries,proto3" json:"key_share_entries,omitempty"`
	PskKeyExchangeModes []uint32 `protobuf:"varint,9,rep,packed,name=psk_key_exchange_modes,json=pskKeyExchangeModes,proto3" json:"psk_key_exchange_modes,omitempty"`
}

func (x *ConnectionData_DecodedInfo) Reset() {
	*x = ConnectionData_DecodedInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionData_DecodedInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionData_DecodedInfo) ProtoMessage() {}

func (x *ConnectionData_DecodedInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionData_DecodedInfo.ProtoReflect.Descriptor instead.
func (*ConnectionData_DecodedInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2, 3}
}

func (x *ConnectionData_DecodedInfo) GetSni() string {
	if x != nil {
		return x.Sni
	}
	return ""
}

func (x *ConnectionData_DecodedInfo) GetSignatureSchemes() []uint32 {
	if x != nil {
		return x.SignatureSchemes
	}
	return nil
}

func (x *ConnectionData_DecodedInfo) GetSupportedVersions() []uint32 {
	if x != nil {
		return x.SupportedVersions
	}
	return nil
}

func (x *ConnectionData_DecodedInfo) GetSupportedGroups() []uint32 {
	if x != nil {
		return x.SupportedGroups
	}
	return nil
}

func (x *ConnectionData_DecodedInfo) GetEcPointFormats() []uint32 {
	if x != nil {
		return x.EcPointFormats
	}
	return nil
}

func (x *ConnectionData_DecodedInfo) GetOscp() bool {
	if x != nil {
		return x.Oscp
	}
	return false
}

func (x *ConnectionData_DecodedInfo) GetAlpns() []string {
	if x != nil {
		return x.Alpns
	}
	return nil
}

func (x *ConnectionData_DecodedInfo) GetKeyShareEntries() []uint32 {
	if x != nil {
		return x.KeyShareEntries
	}
	return nil
}

func (x *ConnectionData_DecodedInfo) GetPskKeyExchangeModes() []uint32 {
	if x != nil {
		return x.PskKeyExchangeModes
	}
	return nil
}

type ConnectionData_ClientHelloData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientVersion   uint32                          `protobuf:"varint,1,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
	RandomLen       uint32                          `protobuf:"varint,2,opt,name=random_len,json=randomLen,proto3" json:"random_len,omitempty"`
	SessionIdLen    uint32                          `protobuf:"varint,3,opt,name=session_id_len,json=sessionIdLen,proto3" json:"session_id_len,omitempty"`
	SessionId       []byte                          `protobuf:"bytes,4,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	CipherSuitesLen uint32                          `protobuf:"varint,5,opt,name=cipher_suites_len,json=cipherSuitesLen,proto3" json:"cipher_suites_len,omitempty"`
	CipherSuites    []uint32                        `protobuf:"varint,6,rep,packed,name=cipher_suites,json=cipherSuites,proto3" json:"cipher_suites,omitempty"`
	CompressMethods []uint32                        `protobuf:"varint,7,rep,packed,name=compress_methods,json=compressMethods,proto3" json:"compress_methods,omitempty"`
	ExtensionLen    int32                           `protobuf:"varint,8,opt,name=extension_len,json=extensionLen,proto3" json:"extension_len,omitempty"`
	Extensions      []*ConnectionData_ExtensionItem `protobuf:"bytes,9,rep,name=extensions,proto3" json:"extensions,omitempty"`
	ExtensionInfo   *ConnectionData_DecodedInfo     `protobuf:"bytes,10,opt,name=extension_info,json=extensionInfo,proto3" json:"extension_info,omitempty"`
	UseGrease       bool                            `protobuf:"varint,11,opt,name=use_grease,json=useGrease,proto3" json:"use_grease,omitempty"`
	Ja3             string                          `protobuf:"bytes,12,opt,name=ja3,proto3" json:"ja3,omitempty"`
	Ja3Digest       string                          `protobuf:"bytes,13,opt,name=ja3_digest,json=ja3Digest,proto3" json:"ja3_digest,omitempty"`
}

func (x *ConnectionData_ClientHelloData) Reset() {
	*x = ConnectionData_ClientHelloData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionData_ClientHelloData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionData_ClientHelloData) ProtoMessage() {}

func (x *ConnectionData_ClientHelloData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionData_ClientHelloData.ProtoReflect.Descriptor instead.
func (*ConnectionData_ClientHelloData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2, 4}
}

func (x *ConnectionData_ClientHelloData) GetClientVersion() uint32 {
	if x != nil {
		return x.ClientVersion
	}
	return 0
}

func (x *ConnectionData_ClientHelloData) GetRandomLen() uint32 {
	if x != nil {
		return x.RandomLen
	}
	return 0
}

func (x *ConnectionData_ClientHelloData) GetSessionIdLen() uint32 {
	if x != nil {
		return x.SessionIdLen
	}
	return 0
}

func (x *ConnectionData_ClientHelloData) GetSessionId() []byte {
	if x != nil {
		return x.SessionId
	}
	return nil
}

func (x *ConnectionData_ClientHelloData) GetCipherSuitesLen() uint32 {
	if x != nil {
		return x.CipherSuitesLen
	}
	return 0
}

func (x *ConnectionData_ClientHelloData) GetCipherSuites() []uint32 {
	if x != nil {
		return x.CipherSuites
	}
	return nil
}

func (x *ConnectionData_ClientHelloData) GetCompressMethods() []uint32 {
	if x != nil {
		return x.CompressMethods
	}
	return nil
}

func (x *ConnectionData_ClientHelloData) GetExtensionLen() int32 {
	if x != nil {
		return x.ExtensionLen
	}
	return 0
}

func (x *ConnectionData_ClientHelloData) GetExtensions() []*ConnectionData_ExtensionItem {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *ConnectionData_ClientHelloData) GetExtensionInfo() *ConnectionData_DecodedInfo {
	if x != nil {
		return x.ExtensionInfo
	}
	return nil
}

func (x *ConnectionData_ClientHelloData) GetUseGrease() bool {
	if x != nil {
		return x.UseGrease
	}
	return false
}

func (x *ConnectionData_ClientHelloData) GetJa3() string {
	if x != nil {
		return x.Ja3
	}
	return ""
}

func (x *ConnectionData_ClientHelloData) GetJa3Digest() string {
	if x != nil {
		return x.Ja3Digest
	}
	return ""
}

type ConnectionData_ServerHelloData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerVersion     uint32                          `protobuf:"varint,1,opt,name=server_version,json=serverVersion,proto3" json:"server_version,omitempty"`
	RandomLen         uint32                          `protobuf:"varint,2,opt,name=random_len,json=randomLen,proto3" json:"random_len,omitempty"`
	SessionIdLen      uint32                          `protobuf:"varint,3,opt,name=session_id_len,json=sessionIdLen,proto3" json:"session_id_len,omitempty"`
	SessionId         []byte                          `protobuf:"bytes,4,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	CipherSuiteSel    uint32                          `protobuf:"varint,5,opt,name=cipher_suite_sel,json=cipherSuiteSel,proto3" json:"cipher_suite_sel,omitempty"`
	CompressMethodSel uint32                          `protobuf:"varint,6,opt,name=compress_method_sel,json=compressMethodSel,proto3" json:"compress_method_sel,omitempty"`
	ExtensionLen      int32                           `protobuf:"varint,7,opt,name=extension_len,json=extensionLen,proto3" json:"extension_len,omitempty"`
	Extensions        []*ConnectionData_ExtensionItem `protobuf:"bytes,8,rep,name=extensions,proto3" json:"extensions,omitempty"`
	ExtensionInfo     *ConnectionData_DecodedInfo     `protobuf:"bytes,9,opt,name=extension_info,json=extensionInfo,proto3" json:"extension_info,omitempty"`
}

func (x *ConnectionData_ServerHelloData) Reset() {
	*x = ConnectionData_ServerHelloData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionData_ServerHelloData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionData_ServerHelloData) ProtoMessage() {}

func (x *ConnectionData_ServerHelloData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionData_ServerHelloData.ProtoReflect.Descriptor instead.
func (*ConnectionData_ServerHelloData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2, 5}
}

func (x *ConnectionData_ServerHelloData) GetServerVersion() uint32 {
	if x != nil {
		return x.ServerVersion
	}
	return 0
}

func (x *ConnectionData_ServerHelloData) GetRandomLen() uint32 {
	if x != nil {
		return x.RandomLen
	}
	return 0
}

func (x *ConnectionData_ServerHelloData) GetSessionIdLen() uint32 {
	if x != nil {
		return x.SessionIdLen
	}
	return 0
}

func (x *ConnectionData_ServerHelloData) GetSessionId() []byte {
	if x != nil {
		return x.SessionId
	}
	return nil
}

func (x *ConnectionData_ServerHelloData) GetCipherSuiteSel() uint32 {
	if x != nil {
		return x.CipherSuiteSel
	}
	return 0
}

func (x *ConnectionData_ServerHelloData) GetCompressMethodSel() uint32 {
	if x != nil {
		return x.CompressMethodSel
	}
	return 0
}

func (x *ConnectionData_ServerHelloData) GetExtensionLen() int32 {
	if x != nil {
		return x.ExtensionLen
	}
	return 0
}

func (x *ConnectionData_ServerHelloData) GetExtensions() []*ConnectionData_ExtensionItem {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *ConnectionData_ServerHelloData) GetExtensionInfo() *ConnectionData_DecodedInfo {
	if x != nil {
		return x.ExtensionInfo
	}
	return nil
}

type ConnectionData_CertSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Digest  string `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
	Issuer  string `protobuf:"bytes,2,opt,name=issuer,proto3" json:"issuer,omitempty"`
	Subject string `protobuf:"bytes,3,opt,name=subject,proto3" json:"subject,omitempty"`
	IsCa    bool   `protobuf:"varint,4,opt,name=is_ca,json=isCa,proto3" json:"is_ca,omitempty"`
}

func (x *ConnectionData_CertSummary) Reset() {
	*x = ConnectionData_CertSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionData_CertSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionData_CertSummary) ProtoMessage() {}

func (x *ConnectionData_CertSummary) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionData_CertSummary.ProtoReflect.Descriptor instead.
func (*ConnectionData_CertSummary) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2, 6}
}

func (x *ConnectionData_CertSummary) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *ConnectionData_CertSummary) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *ConnectionData_CertSummary) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *ConnectionData_CertSummary) GetIsCa() bool {
	if x != nil {
		return x.IsCa
	}
	return false
}

type ConnectionData_StreamData_StreamInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start         *timestamp.Timestamp `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End           *timestamp.Timestamp `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
	DurationNsecs int64                `protobuf:"varint,3,opt,name=duration_nsecs,json=durationNsecs,proto3" json:"duration_nsecs,omitempty"`
	SawStart      bool                 `protobuf:"varint,4,opt,name=saw_start,json=sawStart,proto3" json:"saw_start,omitempty"`
	SawEnd        bool                 `protobuf:"varint,5,opt,name=saw_end,json=sawEnd,proto3" json:"saw_end,omitempty"`
	SrcIp         string               `protobuf:"bytes,6,opt,name=src_ip,json=srcIp,proto3" json:"src_ip,omitempty"`
	DstIp         string               `protobuf:"bytes,7,opt,name=dst_ip,json=dstIp,proto3" json:"dst_ip,omitempty"`
	SrcPort       uint32               `protobuf:"varint,8,opt,name=src_port,json=srcPort,proto3" json:"src_port,omitempty"`
	DstPort       uint32               `protobuf:"varint,9,opt,name=dst_port,json=dstPort,proto3" json:"dst_port,omitempty"`
	Bytes         int64                `protobuf:"varint,10,opt,name=bytes,proto3" json:"bytes,omitempty"`
	Packets       int64                `protobuf:"varint,11,opt,name=packets,proto3" json:"packets,omitempty"`
	Bps           float32              `protobuf:"fixed32,12,opt,name=bps,proto3" json:"bps,omitempty"`
	Pps           float32              `protobuf:"fixed32,13,opt,name=pps,proto3" json:"pps,omitempty"`
	DetectedError bool                 `protobuf:"varint,14,opt,name=detected_error,json=detectedError,proto3" json:"detected_error,omitempty"`
	ErrorType     string               `protobuf:"bytes,15,opt,name=error_type,json=errorType,proto3" json:"error_type,omitempty"`
	ErrorTime     *timestamp.Timestamp `protobuf:"bytes,16,opt,name=error_time,json=errorTime,proto3" json:"error_time,omitempty"`
}

func (x *ConnectionData_StreamData_StreamInfo) Reset() {
	*x = ConnectionData_StreamData_StreamInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionData_StreamData_StreamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionData_StreamData_StreamInfo) ProtoMessage() {}

func (x *ConnectionData_StreamData_StreamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionData_StreamData_StreamInfo.ProtoReflect.Descriptor instead.
func (*ConnectionData_StreamData_StreamInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2, 1, 0}
}

func (x *ConnectionData_StreamData_StreamInfo) GetStart() *timestamp.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *ConnectionData_StreamData_StreamInfo) GetEnd() *timestamp.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *ConnectionData_StreamData_StreamInfo) GetDurationNsecs() int64 {
	if x != nil {
		return x.DurationNsecs
	}
	return 0
}

func (x *ConnectionData_StreamData_StreamInfo) GetSawStart() bool {
	if x != nil {
		return x.SawStart
	}
	return false
}

func (x *ConnectionData_StreamData_StreamInfo) GetSawEnd() bool {
	if x != nil {
		return x.SawEnd
	}
	return false
}

func (x *ConnectionData_StreamData_StreamInfo) GetSrcIp() string {
	if x != nil {
		return x.SrcIp
	}
	return ""
}

func (x *ConnectionData_StreamData_StreamInfo) GetDstIp() string {
	if x != nil {
		return x.DstIp
	}
	return ""
}

func (x *ConnectionData_StreamData_StreamInfo) GetSrcPort() uint32 {
	if x != nil {
		return x.SrcPort
	}
	return 0
}

func (x *ConnectionData_StreamData_StreamInfo) GetDstPort() uint32 {
	if x != nil {
		return x.DstPort
	}
	return 0
}

func (x *ConnectionData_StreamData_StreamInfo) GetBytes() int64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *ConnectionData_StreamData_StreamInfo) GetPackets() int64 {
	if x != nil {
		return x.Packets
	}
	return 0
}

func (x *ConnectionData_StreamData_StreamInfo) GetBps() float32 {
	if x != nil {
		return x.Bps
	}
	return 0
}

func (x *ConnectionData_StreamData_StreamInfo) GetPps() float32 {
	if x != nil {
		return x.Pps
	}
	return 0
}

func (x *ConnectionData_StreamData_StreamInfo) GetDetectedError() bool {
	if x != nil {
		return x.DetectedError
	}
	return false
}

func (x *ConnectionData_StreamData_StreamInfo) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

func (x *ConnectionData_StreamData_StreamInfo) GetErrorTime() *timestamp.Timestamp {
	if x != nil {
		return x.ErrorTime
	}
	return nil
}

type ConnectionData_StreamData_PlaintextSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HskRecords        int64 `protobuf:"varint,1,opt,name=hsk_records,json=hskRecords,proto3" json:"hsk_records,omitempty"`
	HskBytes          int64 `protobuf:"varint,2,opt,name=hsk_bytes,json=hskBytes,proto3" json:"hsk_bytes,omitempty"`
	AlertRecords      int64 `protobuf:"varint,3,opt,name=alert_records,json=alertRecords,proto3" json:"alert_records,omitempty"`
	AlertBytes        int64 `protobuf:"varint,4,opt,name=alert_bytes,json=alertBytes,proto3" json:"alert_bytes,omitempty"`
	CctRecords        int64 `protobuf:"varint,5,opt,name=cct_records,json=cctRecords,proto3" json:"cct_records,omitempty"`
	CctBytes          int64 `protobuf:"varint,6,opt,name=cct_bytes,json=cctBytes,proto3" json:"cct_bytes,omitempty"`
	AppdataRecords    int64 `protobuf:"varint,7,opt,name=appdata_records,json=appdataRecords,proto3" json:"appdata_records,omitempty"`
	AppdataBytes      int64 `protobuf:"varint,8,opt,name=appdata_bytes,json=appdataBytes,proto3" json:"appdata_bytes,omitempty"`
	FragmentedRecords int32 `protobuf:"varint,9,opt,name=fragmented_records,json=fragmentedRecords,proto3" json:"fragmented_records,omitempty"`
	MaxMessages       int32 `protobuf:"varint,10,opt,name=max_messages,json=maxMessages,proto3" json:"max_messages,omitempty"`
}

func (x *ConnectionData_StreamData_PlaintextSummary) Reset() {
	*x = ConnectionData_StreamData_PlaintextSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionData_StreamData_PlaintextSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionData_StreamData_PlaintextSummary) ProtoMessage() {}

func (x *ConnectionData_StreamData_PlaintextSummary) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionData_StreamData_PlaintextSummary.ProtoReflect.Descriptor instead.
func (*ConnectionData_StreamData_PlaintextSummary) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2, 1, 1}
}

func (x *ConnectionData_StreamData_PlaintextSummary) GetHskRecords() int64 {
	if x != nil {
		return x.HskRecords
	}
	return 0
}

func (x *ConnectionData_StreamData_PlaintextSummary) GetHskBytes() int64 {
	if x != nil {
		return x.HskBytes
	}
	return 0
}

func (x *ConnectionData_StreamData_PlaintextSummary) GetAlertRecords() int64 {
	if x != nil {
		return x.AlertRecords
	}
	return 0
}

func (x *ConnectionData_StreamData_PlaintextSummary) GetAlertBytes() int64 {
	if x != nil {
		return x.AlertBytes
	}
	return 0
}

func (x *ConnectionData_StreamData_PlaintextSummary) GetCctRecords() int64 {
	if x != nil {
		return x.CctRecords
	}
	return 0
}

func (x *ConnectionData_StreamData_PlaintextSummary) GetCctBytes() int64 {
	if x != nil {
		return x.CctBytes
	}
	return 0
}

func (x *ConnectionData_StreamData_PlaintextSummary) GetAppdataRecords() int64 {
	if x != nil {
		return x.AppdataRecords
	}
	return 0
}

func (x *ConnectionData_StreamData_PlaintextSummary) GetAppdataBytes() int64 {
	if x != nil {
		return x.AppdataBytes
	}
	return 0
}

func (x *ConnectionData_StreamData_PlaintextSummary) GetFragmentedRecords() int32 {
	if x != nil {
		return x.FragmentedRecords
	}
	return 0
}

func (x *ConnectionData_StreamData_PlaintextSummary) GetMaxMessages() int32 {
	if x != nil {
		return x.MaxMessages
	}
	return 0
}

type ConnectionData_StreamData_CiphertextSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HskRecords     int64 `protobuf:"varint,1,opt,name=hsk_records,json=hskRecords,proto3" json:"hsk_records,omitempty"`
	HskBytes       int64 `protobuf:"varint,2,opt,name=hsk_bytes,json=hskBytes,proto3" json:"hsk_bytes,omitempty"`
	AlertRecords   int64 `protobuf:"varint,3,opt,name=alert_records,json=alertRecords,proto3" json:"alert_records,omitempty"`
	AlertBytes     int64 `protobuf:"varint,4,opt,name=alert_bytes,json=alertBytes,proto3" json:"alert_bytes,omitempty"`
	CctRecords     int64 `protobuf:"varint,5,opt,name=cct_records,json=cctRecords,proto3" json:"cct_records,omitempty"`
	CctBytes       int64 `protobuf:"varint,6,opt,name=cct_bytes,json=cctBytes,proto3" json:"cct_bytes,omitempty"`
	AppdataRecords int64 `protobuf:"varint,7,opt,name=appdata_records,json=appdataRecords,proto3" json:"appdata_records,omitempty"`
	AppdataBytes   int64 `protobuf:"varint,8,opt,name=appdata_bytes,json=appdataBytes,proto3" json:"appdata_bytes,omitempty"`
}

func (x *ConnectionData_StreamData_CiphertextSummary) Reset() {
	*x = ConnectionData_StreamData_CiphertextSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionData_StreamData_CiphertextSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionData_StreamData_CiphertextSummary) ProtoMessage() {}

func (x *ConnectionData_StreamData_CiphertextSummary) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionData_StreamData_CiphertextSummary.ProtoReflect.Descriptor instead.
func (*ConnectionData_StreamData_CiphertextSummary) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2, 1, 2}
}

func (x *ConnectionData_StreamData_CiphertextSummary) GetHskRecords() int64 {
	if x != nil {
		return x.HskRecords
	}
	return 0
}

func (x *ConnectionData_StreamData_CiphertextSummary) GetHskBytes() int64 {
	if x != nil {
		return x.HskBytes
	}
	return 0
}

func (x *ConnectionData_StreamData_CiphertextSummary) GetAlertRecords() int64 {
	if x != nil {
		return x.AlertRecords
	}
	return 0
}

func (x *ConnectionData_StreamData_CiphertextSummary) GetAlertBytes() int64 {
	if x != nil {
		return x.AlertBytes
	}
	return 0
}

func (x *ConnectionData_StreamData_CiphertextSummary) GetCctRecords() int64 {
	if x != nil {
		return x.CctRecords
	}
	return 0
}

func (x *ConnectionData_StreamData_CiphertextSummary) GetCctBytes() int64 {
	if x != nil {
		return x.CctBytes
	}
	return 0
}

func (x *ConnectionData_StreamData_CiphertextSummary) GetAppdataRecords() int64 {
	if x != nil {
		return x.AppdataRecords
	}
	return 0
}

func (x *ConnectionData_StreamData_CiphertextSummary) GetAppdataBytes() int64 {
	if x != nil {
		return x.AppdataBytes
	}
	return 0
}

type ConnectionData_StreamData_HandshakeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Htype uint32 `protobuf:"varint,1,opt,name=htype,proto3" json:"htype,omitempty"`
	Len   uint32 `protobuf:"varint,2,opt,name=len,proto3" json:"len,omitempty"`
}

func (x *ConnectionData_StreamData_HandshakeItem) Reset() {
	*x = ConnectionData_StreamData_HandshakeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionData_StreamData_HandshakeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionData_StreamData_HandshakeItem) ProtoMessage() {}

func (x *ConnectionData_StreamData_HandshakeItem) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionData_StreamData_HandshakeItem.ProtoReflect.Descriptor instead.
func (*ConnectionData_StreamData_HandshakeItem) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2, 1, 3}
}

func (x *ConnectionData_StreamData_HandshakeItem) GetHtype() uint32 {
	if x != nil {
		return x.Htype
	}
	return 0
}

func (x *ConnectionData_StreamData_HandshakeItem) GetLen() uint32 {
	if x != nil {
		return x.Len
	}
	return 0
}

var File_common_proto protoreflect.FileDescriptor

var file_common_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10,
	0x6c, 0x75, 0x69, 0x64, 0x73, 0x2e, 0x74, 0x6c, 0x73, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x76, 0x31,
	0x1a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6c,
	0x61, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3b, 0x0a,
	0x0f, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x72, 0x61, 0x77, 0x22, 0xe4, 0x01, 0x0a, 0x0a, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72,
	0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x73, 0x67, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x73, 0x67, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xfd, 0x20, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6c, 0x75, 0x69, 0x64, 0x73, 0x2e, 0x74, 0x6c, 0x73, 0x75, 0x74,
	0x69, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x4c, 0x0a, 0x0b, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x6c, 0x75, 0x69, 0x64, 0x73, 0x2e, 0x74, 0x6c, 0x73, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x73, 0x65, 0x6e,
	0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x4c, 0x0a, 0x0b, 0x72, 0x63, 0x76, 0x64, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6c,
	0x75, 0x69, 0x64, 0x73, 0x2e, 0x74, 0x6c, 0x73, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x72, 0x63, 0x76, 0x64, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x53, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6c, 0x75,
	0x69, 0x64, 0x73, 0x2e, 0x74, 0x6c, 0x73, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x53, 0x0a, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x6c, 0x75, 0x69, 0x64, 0x73, 0x2e, 0x74, 0x6c, 0x73, 0x75, 0x74, 0x69, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12,
	0x4f, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x75, 0x69, 0x64, 0x73, 0x2e, 0x74, 0x6c,
	0x73, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x73,
	0x12, 0x4f, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x75, 0x69, 0x64, 0x73, 0x2e, 0x74,
	0x6c, 0x73, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x8d, 0x03, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x65, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x73, 0x65, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x73, 0x65, 0x63, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x75,
	0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x48, 0x61, 0x6e, 0x64,
	0x73, 0x68, 0x61, 0x6b, 0x65, 0x1a, 0x8c, 0x0d, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x4a, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6c, 0x75, 0x69, 0x64, 0x73, 0x2e, 0x74, 0x6c, 0x73, 0x75, 0x74,
	0x69, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x61, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x61, 0x63,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6c, 0x75, 0x69, 0x64, 0x73, 0x2e,
	0x74, 0x6c, 0x73, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x41, 0x63, 0x63, 0x12, 0x64, 0x0a, 0x0e, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78,
	0x74, 0x5f, 0x61, 0x63, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6c, 0x75,
	0x69, 0x64, 0x73, 0x2e, 0x74, 0x6c, 0x73, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74,
	0x65, 0x78, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x69, 0x70, 0x68,
	0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x41, 0x63, 0x63, 0x12, 0x59, 0x0a, 0x0a, 0x68, 0x61, 0x6e,
	0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x6c, 0x75, 0x69, 0x64, 0x73, 0x2e, 0x74, 0x6c, 0x73, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x73,
	0x68, 0x61, 0x6b, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x68,
	0x61, 0x6b, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b,
	0x65, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x68, 0x61, 0x6e,
	0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x53, 0x75, 0x6d, 0x1a, 0x82, 0x04, 0x0a, 0x0a, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x65, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x73, 0x65, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x73, 0x65, 0x63, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x61, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x73, 0x61, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x61, 0x77, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73,
	0x61, 0x77, 0x45, 0x6e, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x72, 0x63, 0x49, 0x70, 0x12, 0x15, 0x0a, 0x06,
	0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x73,
	0x74, 0x49, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x64, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x70, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x62, 0x70, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70,
	0x70, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x70, 0x70, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xf4,
	0x02, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x68, 0x73, 0x6b, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x73, 0x6b, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x68, 0x73, 0x6b, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x63, 0x74, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x63,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x63, 0x74, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x63, 0x74,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x61, 0x70, 0x70, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x70, 0x70, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x64, 0x61, 0x74, 0x61, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0xa3, 0x02, 0x0a, 0x11, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72,
	0x74, 0x65, 0x78, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x68,
	0x73, 0x6b, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x68, 0x73, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x68, 0x73, 0x6b, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x68, 0x73, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x63, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x63, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x63, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x61, 0x70, 0x70, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61,
	0x70, 0x70, 0x64, 0x61, 0x74, 0x61, 0x42, 0x79, 0x74, 0x65, 0x73, 0x1a, 0x37, 0x0a, 0x0d, 0x48,
	0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05,
	0x68, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x68, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6c, 0x65, 0x6e, 0x1a, 0x37, 0x0a, 0x0d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x1a, 0xdb, 0x02,
	0x0a, 0x0b, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x6e, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x6e, 0x69, 0x12,
	0x2b, 0x0a, 0x11, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x12,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x63, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0e, 0x65, 0x63, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6f, 0x73, 0x63, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x6f, 0x73, 0x63, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x70, 0x6e, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x70, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6b, 0x65,
	0x79, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x6b, 0x65, 0x79, 0x53, 0x68, 0x61, 0x72, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x70, 0x73, 0x6b, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x13, 0x70, 0x73, 0x6b, 0x4b, 0x65, 0x79, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x1a, 0xb2, 0x04, 0x0a, 0x0f,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x4c, 0x65, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x4c, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x69,
	0x70, 0x68, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x73, 0x5f, 0x6c, 0x65, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x53, 0x75, 0x69,
	0x74, 0x65, 0x73, 0x4c, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72,
	0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x63,
	0x69, 0x70, 0x68, 0x65, 0x72, 0x53, 0x75, 0x69, 0x74, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x6e, 0x12, 0x4e, 0x0a, 0x0a, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x6c, 0x75, 0x69, 0x64, 0x73, 0x2e, 0x74, 0x6c, 0x73, 0x75, 0x74, 0x69, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x53, 0x0a, 0x0e, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x75, 0x69, 0x64, 0x73, 0x2e, 0x74, 0x6c, 0x73, 0x75,
	0x74, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x5f, 0x67, 0x72, 0x65, 0x61, 0x73, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x75, 0x73, 0x65, 0x47, 0x72, 0x65, 0x61, 0x73, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6a, 0x61, 0x33, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6a, 0x61,
	0x33, 0x12, 0x1d, 0x0a, 0x0a, 0x6a, 0x61, 0x33, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6a, 0x61, 0x33, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74,
	0x1a, 0xc0, 0x03, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x65, 0x6c, 0x6c, 0x6f,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x4c, 0x65, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x4c, 0x65, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x5f,
	0x73, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x69, 0x70, 0x68, 0x65,
	0x72, 0x53, 0x75, 0x69, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x73, 0x65, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x6e, 0x12, 0x4e,
	0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6c, 0x75, 0x69, 0x64, 0x73, 0x2e, 0x74, 0x6c, 0x73, 0x75, 0x74,
	0x69, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x53,
	0x0a, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x75, 0x69, 0x64, 0x73, 0x2e, 0x74,
	0x6c, 0x73, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x1a, 0x6c, 0x0a, 0x0b, 0x43, 0x65, 0x72, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x13, 0x0a, 0x05,
	0x69, 0x73, 0x5f, 0x63, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x43,
	0x61, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6c, 0x75, 0x69, 0x64, 0x73, 0x2d, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6c, 0x73,
	0x75, 0x74, 0x69, 0x6c, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_proto_rawDescOnce sync.Once
	file_common_proto_rawDescData = file_common_proto_rawDesc
)

func file_common_proto_rawDescGZIP() []byte {
	file_common_proto_rawDescOnce.Do(func() {
		file_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_proto_rawDescData)
	})
	return file_common_proto_rawDescData
}

var file_common_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_common_proto_goTypes = []interface{}{
	(*CertificateData)(nil),                             // 0: luids.tlsutil.v1.CertificateData
	(*RecordData)(nil),                                  // 1: luids.tlsutil.v1.RecordData
	(*ConnectionData)(nil),                              // 2: luids.tlsutil.v1.ConnectionData
	(*ConnectionData_ConnectionInfo)(nil),               // 3: luids.tlsutil.v1.ConnectionData.ConnectionInfo
	(*ConnectionData_StreamData)(nil),                   // 4: luids.tlsutil.v1.ConnectionData.StreamData
	(*ConnectionData_ExtensionItem)(nil),                // 5: luids.tlsutil.v1.ConnectionData.ExtensionItem
	(*ConnectionData_DecodedInfo)(nil),                  // 6: luids.tlsutil.v1.ConnectionData.DecodedInfo
	(*ConnectionData_ClientHelloData)(nil),              // 7: luids.tlsutil.v1.ConnectionData.ClientHelloData
	(*ConnectionData_ServerHelloData)(nil),              // 8: luids.tlsutil.v1.ConnectionData.ServerHelloData
	(*ConnectionData_CertSummary)(nil),                  // 9: luids.tlsutil.v1.ConnectionData.CertSummary
	(*ConnectionData_StreamData_StreamInfo)(nil),        // 10: luids.tlsutil.v1.ConnectionData.StreamData.StreamInfo
	(*ConnectionData_StreamData_PlaintextSummary)(nil),  // 11: luids.tlsutil.v1.ConnectionData.StreamData.PlaintextSummary
	(*ConnectionData_StreamData_CiphertextSummary)(nil), // 12: luids.tlsutil.v1.ConnectionData.StreamData.CiphertextSummary
	(*ConnectionData_StreamData_HandshakeItem)(nil),     // 13: luids.tlsutil.v1.ConnectionData.StreamData.HandshakeItem
	(*timestamp.Timestamp)(nil),                         // 14: google.protobuf.Timestamp
}
var file_common_proto_depIdxs = []int32{
	14, // 0: luids.tlsutil.v1.RecordData.timestamp:type_name -> google.protobuf.Timestamp
	3,  // 1: luids.tlsutil.v1.ConnectionData.info:type_name -> luids.tlsutil.v1.ConnectionData.ConnectionInfo
	4,  // 2: luids.tlsutil.v1.ConnectionData.send_stream:type_name -> luids.tlsutil.v1.ConnectionData.StreamData
	4,  // 3: luids.tlsutil.v1.ConnectionData.rcvd_stream:type_name -> luids.tlsutil.v1.ConnectionData.StreamData
	7,  // 4: luids.tlsutil.v1.ConnectionData.client_hello:type_name -> luids.tlsutil.v1.ConnectionData.ClientHelloData
	8,  // 5: luids.tlsutil.v1.ConnectionData.server_hello:type_name -> luids.tlsutil.v1.ConnectionData.ServerHelloData
	9,  // 6: luids.tlsutil.v1.ConnectionData.client_certs:type_name -> luids.tlsutil.v1.ConnectionData.CertSummary
	9,  // 7: luids.tlsutil.v1.ConnectionData.server_certs:type_name -> luids.tlsutil.v1.ConnectionData.CertSummary
	14, // 8: luids.tlsutil.v1.ConnectionData.ConnectionInfo.start:type_name -> google.protobuf.Timestamp
	14, // 9: luids.tlsutil.v1.ConnectionData.ConnectionInfo.end:type_name -> google.protobuf.Timestamp
	10, // 10: luids.tlsutil.v1.ConnectionData.StreamData.info:type_name -> luids.tlsutil.v1.ConnectionData.StreamData.StreamInfo
	11, // 11: luids.tlsutil.v1.ConnectionData.StreamData.plaintext_acc:type_name -> luids.tlsutil.v1.ConnectionData.StreamData.PlaintextSummary
	12, // 12: luids.tlsutil.v1.ConnectionData.StreamData.ciphertext_acc:type_name -> luids.tlsutil.v1.ConnectionData.StreamData.CiphertextSummary
	13, // 13: luids.tlsutil.v1.ConnectionData.StreamData.handshakes:type_name -> luids.tlsutil.v1.ConnectionData.StreamData.HandshakeItem
	5,  // 14: luids.tlsutil.v1.ConnectionData.ClientHelloData.extensions:type_name -> luids.tlsutil.v1.ConnectionData.ExtensionItem
	6,  // 15: luids.tlsutil.v1.ConnectionData.ClientHelloData.extension_info:type_name -> luids.tlsutil.v1.ConnectionData.DecodedInfo
	5,  // 16: luids.tlsutil.v1.ConnectionData.ServerHelloData.extensions:type_name -> luids.tlsutil.v1.ConnectionData.ExtensionItem
	6,  // 17: luids.tlsutil.v1.ConnectionData.ServerHelloData.extension_info:type_name -> luids.tlsutil.v1.ConnectionData.DecodedInfo
	14, // 18: luids.tlsutil.v1.ConnectionData.StreamData.StreamInfo.start:type_name -> google.protobuf.Timestamp
	14, // 19: luids.tlsutil.v1.ConnectionData.StreamData.StreamInfo.end:type_name -> google.protobuf.Timestamp
	14, // 20: luids.tlsutil.v1.ConnectionData.StreamData.StreamInfo.error_time:type_name -> google.protobuf.Timestamp
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_common_proto_init() }
func file_common_proto_init() {
	if File_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionData_ConnectionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionData_StreamData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionData_ExtensionItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionData_DecodedInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionData_ClientHelloData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionData_ServerHelloData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionData_CertSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionData_StreamData_StreamInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionData_StreamData_PlaintextSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionData_StreamData_CiphertextSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionData_StreamData_HandshakeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_proto_goTypes,
		DependencyIndexes: file_common_proto_depIdxs,
		MessageInfos:      file_common_proto_msgTypes,
	}.Build()
	File_common_proto = out.File
	file_common_proto_rawDesc = nil
	file_common_proto_goTypes = nil
	file_common_proto_depIdxs = nil
}
