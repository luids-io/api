// Code generated by protoc-gen-go. DO NOT EDIT.
// source: archive.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SaveResolvRequest struct {
	Ts       *timestamp.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	Duration int64                `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	ServerIp string               `protobuf:"bytes,3,opt,name=server_ip,json=serverIp,proto3" json:"server_ip,omitempty"`
	ClientIp string               `protobuf:"bytes,4,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty"`
	//query info
	Qid              int32  `protobuf:"varint,5,opt,name=qid,proto3" json:"qid,omitempty"`
	Name             string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	CheckingDisabled bool   `protobuf:"varint,7,opt,name=checking_disabled,json=checkingDisabled,proto3" json:"checking_disabled,omitempty"`
	//response info
	ReturnCode           int32    `protobuf:"varint,8,opt,name=return_code,json=returnCode,proto3" json:"return_code,omitempty"`
	AuthenticatedData    bool     `protobuf:"varint,9,opt,name=authenticated_data,json=authenticatedData,proto3" json:"authenticated_data,omitempty"`
	ResolvedIps          []string `protobuf:"bytes,10,rep,name=resolved_ips,json=resolvedIps,proto3" json:"resolved_ips,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SaveResolvRequest) Reset()         { *m = SaveResolvRequest{} }
func (m *SaveResolvRequest) String() string { return proto.CompactTextString(m) }
func (*SaveResolvRequest) ProtoMessage()    {}
func (*SaveResolvRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_04f37ff213ec9fca, []int{0}
}

func (m *SaveResolvRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SaveResolvRequest.Unmarshal(m, b)
}
func (m *SaveResolvRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SaveResolvRequest.Marshal(b, m, deterministic)
}
func (m *SaveResolvRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveResolvRequest.Merge(m, src)
}
func (m *SaveResolvRequest) XXX_Size() int {
	return xxx_messageInfo_SaveResolvRequest.Size(m)
}
func (m *SaveResolvRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveResolvRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SaveResolvRequest proto.InternalMessageInfo

func (m *SaveResolvRequest) GetTs() *timestamp.Timestamp {
	if m != nil {
		return m.Ts
	}
	return nil
}

func (m *SaveResolvRequest) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *SaveResolvRequest) GetServerIp() string {
	if m != nil {
		return m.ServerIp
	}
	return ""
}

func (m *SaveResolvRequest) GetClientIp() string {
	if m != nil {
		return m.ClientIp
	}
	return ""
}

func (m *SaveResolvRequest) GetQid() int32 {
	if m != nil {
		return m.Qid
	}
	return 0
}

func (m *SaveResolvRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SaveResolvRequest) GetCheckingDisabled() bool {
	if m != nil {
		return m.CheckingDisabled
	}
	return false
}

func (m *SaveResolvRequest) GetReturnCode() int32 {
	if m != nil {
		return m.ReturnCode
	}
	return 0
}

func (m *SaveResolvRequest) GetAuthenticatedData() bool {
	if m != nil {
		return m.AuthenticatedData
	}
	return false
}

func (m *SaveResolvRequest) GetResolvedIps() []string {
	if m != nil {
		return m.ResolvedIps
	}
	return nil
}

type SaveResolvResponse struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SaveResolvResponse) Reset()         { *m = SaveResolvResponse{} }
func (m *SaveResolvResponse) String() string { return proto.CompactTextString(m) }
func (*SaveResolvResponse) ProtoMessage()    {}
func (*SaveResolvResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_04f37ff213ec9fca, []int{1}
}

func (m *SaveResolvResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SaveResolvResponse.Unmarshal(m, b)
}
func (m *SaveResolvResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SaveResolvResponse.Marshal(b, m, deterministic)
}
func (m *SaveResolvResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveResolvResponse.Merge(m, src)
}
func (m *SaveResolvResponse) XXX_Size() int {
	return xxx_messageInfo_SaveResolvResponse.Size(m)
}
func (m *SaveResolvResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveResolvResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SaveResolvResponse proto.InternalMessageInfo

func (m *SaveResolvResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*SaveResolvRequest)(nil), "luids.dnsutil.v1.SaveResolvRequest")
	proto.RegisterType((*SaveResolvResponse)(nil), "luids.dnsutil.v1.SaveResolvResponse")
}

func init() { proto.RegisterFile("archive.proto", fileDescriptor_04f37ff213ec9fca) }

var fileDescriptor_04f37ff213ec9fca = []byte{
	// 406 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0x4d, 0x8f, 0xd3, 0x30,
	0x14, 0x24, 0xe9, 0x7e, 0x34, 0xaf, 0x80, 0x5a, 0x9f, 0xac, 0x72, 0x20, 0x94, 0x95, 0x08, 0xa0,
	0x4d, 0xc4, 0x72, 0xe4, 0x04, 0xec, 0xa5, 0x57, 0xc3, 0x05, 0x2e, 0x91, 0x13, 0xbf, 0x4d, 0x2d,
	0x12, 0xdb, 0xeb, 0x8f, 0x48, 0xfc, 0x56, 0xfe, 0x0c, 0xaa, 0xd3, 0xb2, 0x0b, 0x48, 0x7b, 0x7b,
	0x9e, 0x79, 0x33, 0x4f, 0x9a, 0x31, 0x3c, 0xe1, 0xb6, 0xdd, 0xc9, 0x11, 0x4b, 0x63, 0xb5, 0xd7,
	0x64, 0xd9, 0x07, 0x29, 0x5c, 0x29, 0x94, 0x0b, 0x5e, 0xf6, 0xe5, 0xf8, 0x6e, 0xfd, 0xa1, 0x93,
	0x7e, 0x17, 0x9a, 0xb2, 0xd5, 0x43, 0xd5, 0xe9, 0x9e, 0xab, 0xae, 0x8a, 0xab, 0x4d, 0xb8, 0xa9,
	0x8c, 0xff, 0x69, 0xd0, 0x55, 0x5e, 0x0e, 0xe8, 0x3c, 0x1f, 0xcc, 0xdd, 0x34, 0xd9, 0x6d, 0x7e,
	0xa5, 0xb0, 0xfa, 0xc2, 0x47, 0x64, 0xe8, 0x74, 0x3f, 0x32, 0xbc, 0x0d, 0xe8, 0x3c, 0x79, 0x03,
	0xa9, 0x77, 0x34, 0xc9, 0x93, 0x62, 0x71, 0xb5, 0x2e, 0x3b, 0xad, 0xbb, 0xfe, 0x70, 0xbf, 0x09,
	0x37, 0xe5, 0xd7, 0xa3, 0x07, 0x4b, 0xbd, 0x23, 0x6b, 0x98, 0x8b, 0x60, 0xb9, 0x97, 0x5a, 0xd1,
	0x34, 0x4f, 0x8a, 0x19, 0xfb, 0xf3, 0x26, 0xcf, 0x20, 0x73, 0x68, 0x47, 0xb4, 0xb5, 0x34, 0x74,
	0x96, 0x27, 0x45, 0xc6, 0xe6, 0x13, 0xb0, 0x35, 0x7b, 0xb2, 0xed, 0x25, 0x2a, 0xbf, 0x27, 0x4f,
	0x26, 0x72, 0x02, 0xb6, 0x86, 0x2c, 0x61, 0x76, 0x2b, 0x05, 0x3d, 0xcd, 0x93, 0xe2, 0x94, 0xed,
	0x47, 0x42, 0xe0, 0x44, 0xf1, 0x01, 0xe9, 0x59, 0xdc, 0x8c, 0x33, 0x79, 0x0b, 0xab, 0x76, 0x87,
	0xed, 0x0f, 0xa9, 0xba, 0x5a, 0x48, 0xc7, 0x9b, 0x1e, 0x05, 0x3d, 0xcf, 0x93, 0x62, 0xce, 0x96,
	0x47, 0xe2, 0xfa, 0x80, 0x93, 0xe7, 0xb0, 0xb0, 0xe8, 0x83, 0x55, 0x75, 0xab, 0x05, 0xd2, 0x79,
	0xb4, 0x86, 0x09, 0xfa, 0xac, 0x05, 0x92, 0x4b, 0x20, 0x3c, 0xf8, 0x1d, 0x2a, 0x2f, 0x5b, 0xee,
	0x51, 0xd4, 0x82, 0x7b, 0x4e, 0xb3, 0x68, 0xb7, 0xfa, 0x8b, 0xb9, 0xe6, 0x9e, 0x93, 0x17, 0xf0,
	0xd8, 0xc6, 0xd4, 0x50, 0xd4, 0xd2, 0x38, 0x0a, 0xf9, 0xac, 0xc8, 0xd8, 0xe2, 0x88, 0x6d, 0x8d,
	0xdb, 0x5c, 0x00, 0xb9, 0x1f, 0xae, 0x33, 0x5a, 0x39, 0x24, 0x4f, 0x21, 0x95, 0x22, 0xa6, 0x9b,
	0xb1, 0x54, 0x8a, 0x2b, 0x01, 0xe7, 0x1f, 0xa7, 0x8e, 0xc9, 0x37, 0x80, 0x3b, 0x01, 0x79, 0x59,
	0xfe, 0x5b, 0x76, 0xf9, 0x5f, 0x57, 0xeb, 0x8b, 0x87, 0x97, 0xa6, 0x9b, 0x9b, 0x47, 0x9f, 0x5e,
	0x7f, 0x7f, 0x75, 0xef, 0xa3, 0x44, 0xcd, 0xa5, 0xd4, 0x15, 0x37, 0xb2, 0x3a, 0x48, 0xab, 0xce,
	0x9a, 0xb6, 0x32, 0x4d, 0x73, 0x16, 0xab, 0x7e, 0xff, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x08, 0xc8,
	0xdd, 0x17, 0x7b, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ArchiveClient is the client API for Archive service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ArchiveClient interface {
	SaveResolv(ctx context.Context, in *SaveResolvRequest, opts ...grpc.CallOption) (*SaveResolvResponse, error)
}

type archiveClient struct {
	cc *grpc.ClientConn
}

func NewArchiveClient(cc *grpc.ClientConn) ArchiveClient {
	return &archiveClient{cc}
}

func (c *archiveClient) SaveResolv(ctx context.Context, in *SaveResolvRequest, opts ...grpc.CallOption) (*SaveResolvResponse, error) {
	out := new(SaveResolvResponse)
	err := c.cc.Invoke(ctx, "/luids.dnsutil.v1.Archive/SaveResolv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArchiveServer is the server API for Archive service.
type ArchiveServer interface {
	SaveResolv(context.Context, *SaveResolvRequest) (*SaveResolvResponse, error)
}

// UnimplementedArchiveServer can be embedded to have forward compatible implementations.
type UnimplementedArchiveServer struct {
}

func (*UnimplementedArchiveServer) SaveResolv(ctx context.Context, req *SaveResolvRequest) (*SaveResolvResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveResolv not implemented")
}

func RegisterArchiveServer(s *grpc.Server, srv ArchiveServer) {
	s.RegisterService(&_Archive_serviceDesc, srv)
}

func _Archive_SaveResolv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveResolvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServer).SaveResolv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luids.dnsutil.v1.Archive/SaveResolv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServer).SaveResolv(ctx, req.(*SaveResolvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Archive_serviceDesc = grpc.ServiceDesc{
	ServiceName: "luids.dnsutil.v1.Archive",
	HandlerType: (*ArchiveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveResolv",
			Handler:    _Archive_SaveResolv_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "archive.proto",
}
